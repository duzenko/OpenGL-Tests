/**
 * Loader generated by glad 2.0.0-beta on Sun Jul 19 10:33:02 2020
 *
 * Generator: C/C++
 * Specification: gl
 * Extensions: 0
 *
 * APIs:
 *  - gl:compatibility=1.1
 *
 * Options:
 *  - MX_GLOBAL = False
 *  - ON_DEMAND = True
 *  - LOADER = True
 *  - ALIAS = False
 *  - HEADER_ONLY = True
 *  - DEBUG = False
 *  - MX = False
 *
 * Commandline:
 *    --api='gl:compatibility=1.1' --extensions='' c --on-demand --loader --header-only
 *
 * Online:
 *    http://glad.sh/#api=gl%3Acompatibility%3D1.1&extensions=&generator=c&options=ON_DEMAND%2CLOADER%2CHEADER_ONLY
 *
 */

#ifndef GLAD_GL_H_
#define GLAD_GL_H_

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifdef __gl_h_
  #error OpenGL (gl.h) header already included (API: gl), remove previous include!
#endif
#define __gl_h_ 1
#ifdef __gl3_h_
  #error OpenGL (gl3.h) header already included (API: gl), remove previous include!
#endif
#define __gl3_h_ 1
#ifdef __glext_h_
  #error OpenGL (glext.h) header already included (API: gl), remove previous include!
#endif
#define __glext_h_ 1
#ifdef __gl3ext_h_
  #error OpenGL (gl3ext.h) header already included (API: gl), remove previous include!
#endif
#define __gl3ext_h_ 1
#ifdef __clang__
#pragma clang diagnostic pop
#endif

#define GLAD_GL
#define GLAD_OPTION_GL_ON_DEMAND
#define GLAD_OPTION_GL_LOADER
#define GLAD_OPTION_GL_HEADER_ONLY

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.0-beta"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GL_2D 0x0600
#define GL_2_BYTES 0x1407
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_3_BYTES 0x1408
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_4_BYTES 0x1409
#define GL_ACCUM 0x0100
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ADD 0x0104
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALPHA 0x1906
#define GL_ALPHA12 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA4 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_ALPHA_BITS 0x0D55
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALWAYS 0x0207
#define GL_AMBIENT 0x1200
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_AND 0x1501
#define GL_AND_INVERTED 0x1504
#define GL_AND_REVERSE 0x1502
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_AUTO_NORMAL 0x0D80
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_AUX_BUFFERS 0x0C00
#define GL_BACK 0x0405
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_BITMAP 0x1A00
#define GL_BITMAP_TOKEN 0x0704
#define GL_BLEND 0x0BE2
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLUE 0x1905
#define GL_BLUE_BIAS 0x0D1B
#define GL_BLUE_BITS 0x0D54
#define GL_BLUE_SCALE 0x0D1A
#define GL_BYTE 0x1400
#define GL_C3F_V3F 0x2A24
#define GL_C4F_N3F_V3F 0x2A26
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_CCW 0x0901
#define GL_CLAMP 0x2900
#define GL_CLEAR 0x1500
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_COEFF 0x0A00
#define GL_COLOR 0x1800
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_INDEX 0x1900
#define GL_COLOR_INDEXES 0x1603
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_COLOR_MATERIAL 0x0B57
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_COPY 0x1503
#define GL_COPY_INVERTED 0x150C
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_CURRENT_BIT 0x00000001
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CW 0x0900
#define GL_DECAL 0x2101
#define GL_DECR 0x1E03
#define GL_DEPTH 0x1801
#define GL_DEPTH_BIAS 0x0D1F
#define GL_DEPTH_BITS 0x0D56
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_COMPONENT 0x1902
#define GL_DEPTH_FUNC 0x0B74
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DIFFUSE 0x1201
#define GL_DITHER 0x0BD0
#define GL_DOMAIN 0x0A02
#define GL_DONT_CARE 0x1100
#define GL_DOUBLE 0x140A
#define GL_DOUBLEBUFFER 0x0C32
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_DST_ALPHA 0x0304
#define GL_DST_COLOR 0x0306
#define GL_EDGE_FLAG 0x0B43
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_EMISSION 0x1600
#define GL_ENABLE_BIT 0x00002000
#define GL_EQUAL 0x0202
#define GL_EQUIV 0x1509
#define GL_EVAL_BIT 0x00010000
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_EXTENSIONS 0x1F03
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_PLANE 0x2502
#define GL_FALSE 0
#define GL_FASTEST 0x1101
#define GL_FEEDBACK 0x1C01
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_FILL 0x1B02
#define GL_FLAT 0x1D00
#define GL_FLOAT 0x1406
#define GL_FOG 0x0B60
#define GL_FOG_BIT 0x00000080
#define GL_FOG_COLOR 0x0B66
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_END 0x0B64
#define GL_FOG_HINT 0x0C54
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_MODE 0x0B65
#define GL_FOG_START 0x0B63
#define GL_FRONT 0x0404
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT_FACE 0x0B46
#define GL_FRONT_LEFT 0x0400
#define GL_FRONT_RIGHT 0x0401
#define GL_GEQUAL 0x0206
#define GL_GREATER 0x0204
#define GL_GREEN 0x1904
#define GL_GREEN_BIAS 0x0D19
#define GL_GREEN_BITS 0x0D53
#define GL_GREEN_SCALE 0x0D18
#define GL_HINT_BIT 0x00008000
#define GL_INCR 0x1E02
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_BITS 0x0D51
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_INDEX_MODE 0x0C30
#define GL_INDEX_OFFSET 0x0D13
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_INT 0x1404
#define GL_INTENSITY 0x8049
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_OPERATION 0x0502
#define GL_INVALID_VALUE 0x0501
#define GL_INVERT 0x150A
#define GL_KEEP 0x1E00
#define GL_LEFT 0x0406
#define GL_LEQUAL 0x0203
#define GL_LESS 0x0201
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_LIGHTING 0x0B50
#define GL_LIGHTING_BIT 0x00000040
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LINE 0x1B01
#define GL_LINEAR 0x2601
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_LINES 0x0001
#define GL_LINE_BIT 0x00000004
#define GL_LINE_LOOP 0x0002
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LINE_STRIP 0x0003
#define GL_LINE_TOKEN 0x0702
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LIST_BASE 0x0B32
#define GL_LIST_BIT 0x00020000
#define GL_LIST_INDEX 0x0B33
#define GL_LIST_MODE 0x0B30
#define GL_LOAD 0x0101
#define GL_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_MATRIX_MODE 0x0BA0
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_MODULATE 0x2100
#define GL_MULT 0x0103
#define GL_N3F_V3F 0x2A25
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_NAND 0x150E
#define GL_NEAREST 0x2600
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NEVER 0x0200
#define GL_NICEST 0x1102
#define GL_NONE 0
#define GL_NOOP 0x1505
#define GL_NOR 0x1508
#define GL_NORMALIZE 0x0BA1
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NOTEQUAL 0x0205
#define GL_NO_ERROR 0
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_PLANE 0x2501
#define GL_ONE 1
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_OR 0x1507
#define GL_ORDER 0x0A01
#define GL_OR_INVERTED 0x150D
#define GL_OR_REVERSE 0x150B
#define GL_OUT_OF_MEMORY 0x0505
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_POINT 0x1B00
#define GL_POINTS 0x0000
#define GL_POINT_BIT 0x00000002
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_POINT_TOKEN 0x0701
#define GL_POLYGON 0x0009
#define GL_POLYGON_BIT 0x00000008
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_POLYGON_TOKEN 0x0703
#define GL_POSITION 0x1203
#define GL_PROJECTION 0x1701
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_Q 0x2003
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_QUADS 0x0007
#define GL_QUAD_STRIP 0x0008
#define GL_R 0x2002
#define GL_R3_G3_B2 0x2A10
#define GL_READ_BUFFER 0x0C02
#define GL_RED 0x1903
#define GL_RED_BIAS 0x0D15
#define GL_RED_BITS 0x0D52
#define GL_RED_SCALE 0x0D14
#define GL_RENDER 0x1C00
#define GL_RENDERER 0x1F01
#define GL_RENDER_MODE 0x0C40
#define GL_REPEAT 0x2901
#define GL_REPLACE 0x1E01
#define GL_RETURN 0x0102
#define GL_RGB 0x1907
#define GL_RGB10 0x8052
#define GL_RGB10_A2 0x8059
#define GL_RGB12 0x8053
#define GL_RGB16 0x8054
#define GL_RGB4 0x804F
#define GL_RGB5 0x8050
#define GL_RGB5_A1 0x8057
#define GL_RGB8 0x8051
#define GL_RGBA 0x1908
#define GL_RGBA12 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA2 0x8055
#define GL_RGBA4 0x8056
#define GL_RGBA8 0x8058
#define GL_RGBA_MODE 0x0C31
#define GL_RIGHT 0x0407
#define GL_S 0x2000
#define GL_SCISSOR_BIT 0x00080000
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_SELECT 0x1C02
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SET 0x150F
#define GL_SHADE_MODEL 0x0B54
#define GL_SHININESS 0x1601
#define GL_SHORT 0x1402
#define GL_SMOOTH 0x1D01
#define GL_SPECULAR 0x1202
#define GL_SPHERE_MAP 0x2402
#define GL_SPOT_CUTOFF 0x1206
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SRC_ALPHA 0x0302
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_COLOR 0x0300
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STENCIL 0x1802
#define GL_STENCIL_BITS 0x0D57
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_STEREO 0x0C33
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_T 0x2001
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_V3F 0x2A27
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_T4F_V4F 0x2A28
#define GL_TEXTURE 0x1702
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_BIT 0x00040000
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_ENV 0x2300
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_TEXTURE_WIDTH 0x1000
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TRANSFORM_BIT 0x00001000
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_FAN 0x0006
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRUE 1
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNSIGNED_BYTE 0x1401
#define GL_UNSIGNED_INT 0x1405
#define GL_UNSIGNED_SHORT 0x1403
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_VENDOR 0x1F00
#define GL_VERSION 0x1F02
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VIEWPORT 0x0BA2
#define GL_VIEWPORT_BIT 0x00000800
#define GL_XOR 0x1506
#define GL_ZERO 0
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17


#ifndef __khrplatform_h_
#define __khrplatform_h_

/*
** Copyright (c) 2008-2018 The Khronos Group Inc.
**
** Permission is hereby granted, free of charge, to any person obtaining a
** copy of this software and/or associated documentation files (the
** "Materials"), to deal in the Materials without restriction, including
** without limitation the rights to use, copy, modify, merge, publish,
** distribute, sublicense, and/or sell copies of the Materials, and to
** permit persons to whom the Materials are furnished to do so, subject to
** the following conditions:
**
** The above copyright notice and this permission notice shall be included
** in all copies or substantial portions of the Materials.
**
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
*/

/* Khronos platform-specific types and definitions.
 *
 * The master copy of khrplatform.h is maintained in the Khronos EGL
 * Registry repository at https://github.com/KhronosGroup/EGL-Registry
 * The last semantic modification to khrplatform.h was at commit ID:
 *      67a3e0864c2d75ea5287b9f3d2eb74a745936692
 *
 * Adopters may modify this file to suit their platform. Adopters are
 * encouraged to submit platform specific modifications to the Khronos
 * group so that they can be included in future versions of this file.
 * Please submit changes by filing pull requests or issues on
 * the EGL Registry repository linked above.
 *
 *
 * See the Implementer's Guidelines for information about where this file
 * should be located on your system and for more details of its use:
 *    http://www.khronos.org/registry/implementers_guide.pdf
 *
 * This file should be included as
 *        #include <KHR/khrplatform.h>
 * by Khronos client API header files that use its types and defines.
 *
 * The types in khrplatform.h should only be used to define API-specific types.
 *
 * Types defined in khrplatform.h:
 *    khronos_int8_t              signed   8  bit
 *    khronos_uint8_t             unsigned 8  bit
 *    khronos_int16_t             signed   16 bit
 *    khronos_uint16_t            unsigned 16 bit
 *    khronos_int32_t             signed   32 bit
 *    khronos_uint32_t            unsigned 32 bit
 *    khronos_int64_t             signed   64 bit
 *    khronos_uint64_t            unsigned 64 bit
 *    khronos_intptr_t            signed   same number of bits as a pointer
 *    khronos_uintptr_t           unsigned same number of bits as a pointer
 *    khronos_ssize_t             signed   size
 *    khronos_usize_t             unsigned size
 *    khronos_float_t             signed   32 bit floating point
 *    khronos_time_ns_t           unsigned 64 bit time in nanoseconds
 *    khronos_utime_nanoseconds_t unsigned time interval or absolute time in
 *                                         nanoseconds
 *    khronos_stime_nanoseconds_t signed time interval in nanoseconds
 *    khronos_boolean_enum_t      enumerated boolean type. This should
 *      only be used as a base type when a client API's boolean type is
 *      an enum. Client APIs which use an integer or other type for
 *      booleans cannot use this as the base type for their boolean.
 *
 * Tokens defined in khrplatform.h:
 *
 *    KHRONOS_FALSE, KHRONOS_TRUE Enumerated boolean false/true values.
 *
 *    KHRONOS_SUPPORT_INT64 is 1 if 64 bit integers are supported; otherwise 0.
 *    KHRONOS_SUPPORT_FLOAT is 1 if floats are supported; otherwise 0.
 *
 * Calling convention macros defined in this file:
 *    KHRONOS_APICALL
 *    KHRONOS_GLAD_API_PTR
 *    KHRONOS_APIATTRIBUTES
 *
 * These may be used in function prototypes as:
 *
 *      KHRONOS_APICALL void KHRONOS_GLAD_API_PTR funcname(
 *                                  int arg1,
 *                                  int arg2) KHRONOS_APIATTRIBUTES;
 */

#if defined(__SCITECH_SNAP__) && !defined(KHRONOS_STATIC)
#   define KHRONOS_STATIC 1
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APICALL
 *-------------------------------------------------------------------------
 * This precedes the return type of the function in the function prototype.
 */
#if defined(KHRONOS_STATIC)
    /* If the preprocessor constant KHRONOS_STATIC is defined, make the
     * header compatible with static linking. */
#   define KHRONOS_APICALL
#elif defined(_WIN32)
#   define KHRONOS_APICALL __declspec(dllimport)
#elif defined (__SYMBIAN32__)
#   define KHRONOS_APICALL IMPORT_C
#elif defined(__ANDROID__)
#   define KHRONOS_APICALL __attribute__((visibility("default")))
#else
#   define KHRONOS_APICALL
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_GLAD_API_PTR
 *-------------------------------------------------------------------------
 * This follows the return type of the function  and precedes the function
 * name in the function prototype.
 */
#if defined(_WIN32) && !defined(_WIN32_WCE) && !defined(__SCITECH_SNAP__)
    /* Win32 but not WinCE */
#   define KHRONOS_GLAD_API_PTR __stdcall
#else
#   define KHRONOS_GLAD_API_PTR
#endif

/*-------------------------------------------------------------------------
 * Definition of KHRONOS_APIATTRIBUTES
 *-------------------------------------------------------------------------
 * This follows the closing parenthesis of the function prototype arguments.
 */
#if defined (__ARMCC_2__)
#define KHRONOS_APIATTRIBUTES __softfp
#else
#define KHRONOS_APIATTRIBUTES
#endif

/*-------------------------------------------------------------------------
 * basic type definitions
 *-----------------------------------------------------------------------*/
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || defined(__GNUC__) || defined(__SCO__) || defined(__USLC__)


/*
 * Using <stdint.h>
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__VMS ) || defined(__sgi)

/*
 * Using <inttypes.h>
 */
#include <inttypes.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(_WIN32) && !defined(__SCITECH_SNAP__)

/*
 * Win32
 */
typedef __int32                 khronos_int32_t;
typedef unsigned __int32        khronos_uint32_t;
typedef __int64                 khronos_int64_t;
typedef unsigned __int64        khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif defined(__sun__) || defined(__digital__)

/*
 * Sun or Digital
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#if defined(__arch64__) || defined(_LP64)
typedef long int                khronos_int64_t;
typedef unsigned long int       khronos_uint64_t;
#else
typedef long long int           khronos_int64_t;
typedef unsigned long long int  khronos_uint64_t;
#endif /* __arch64__ */
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#elif 0

/*
 * Hypothetical platform with no float or int64 support
 */
typedef int                     khronos_int32_t;
typedef unsigned int            khronos_uint32_t;
#define KHRONOS_SUPPORT_INT64   0
#define KHRONOS_SUPPORT_FLOAT   0

#else

/*
 * Generic fallback
 */
#include <stdint.h>
typedef int32_t                 khronos_int32_t;
typedef uint32_t                khronos_uint32_t;
typedef int64_t                 khronos_int64_t;
typedef uint64_t                khronos_uint64_t;
#define KHRONOS_SUPPORT_INT64   1
#define KHRONOS_SUPPORT_FLOAT   1

#endif


/*
 * Types that are (so far) the same on all platforms
 */
typedef signed   char          khronos_int8_t;
typedef unsigned char          khronos_uint8_t;
typedef signed   short int     khronos_int16_t;
typedef unsigned short int     khronos_uint16_t;

/*
 * Types that differ between LLP64 and LP64 architectures - in LLP64,
 * pointers are 64 bits, but 'long' is still 32 bits. Win64 appears
 * to be the only LLP64 architecture in current use.
 */
#ifdef _WIN64
typedef signed   long long int khronos_intptr_t;
typedef unsigned long long int khronos_uintptr_t;
typedef signed   long long int khronos_ssize_t;
typedef unsigned long long int khronos_usize_t;
#else
typedef signed   long  int     khronos_intptr_t;
typedef unsigned long  int     khronos_uintptr_t;
typedef signed   long  int     khronos_ssize_t;
typedef unsigned long  int     khronos_usize_t;
#endif

#if KHRONOS_SUPPORT_FLOAT
/*
 * Float type
 */
typedef          float         khronos_float_t;
#endif

#if KHRONOS_SUPPORT_INT64
/* Time types
 *
 * These types can be used to represent a time interval in nanoseconds or
 * an absolute Unadjusted System Time.  Unadjusted System Time is the number
 * of nanoseconds since some arbitrary system event (e.g. since the last
 * time the system booted).  The Unadjusted System Time is an unsigned
 * 64 bit value that wraps back to 0 every 584 years.  Time intervals
 * may be either signed or unsigned.
 */
typedef khronos_uint64_t       khronos_utime_nanoseconds_t;
typedef khronos_int64_t        khronos_stime_nanoseconds_t;
#endif

/*
 * Dummy value used to pad enum types to 32 bits.
 */
#ifndef KHRONOS_MAX_ENUM
#define KHRONOS_MAX_ENUM 0x7FFFFFFF
#endif

/*
 * Enumerated boolean type
 *
 * Values other than zero should be considered to be true.  Therefore
 * comparisons should not be made against KHRONOS_TRUE.
 */
typedef enum {
    KHRONOS_FALSE = 0,
    KHRONOS_TRUE  = 1,
    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM
} khronos_boolean_enum_t;

#endif /* __khrplatform_h_ */

typedef unsigned int GLenum;

typedef unsigned char GLboolean;

typedef unsigned int GLbitfield;

typedef void GLvoid;

typedef khronos_int8_t GLbyte;

typedef khronos_uint8_t GLubyte;

typedef khronos_int16_t GLshort;

typedef khronos_uint16_t GLushort;

typedef int GLint;

typedef unsigned int GLuint;

typedef khronos_int32_t GLclampx;

typedef int GLsizei;

typedef khronos_float_t GLfloat;

typedef khronos_float_t GLclampf;

typedef double GLdouble;

typedef double GLclampd;

typedef void *GLeglClientBufferEXT;

typedef void *GLeglImageOES;

typedef char GLchar;

typedef char GLcharARB;

#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif

typedef khronos_uint16_t GLhalf;

typedef khronos_uint16_t GLhalfARB;

typedef khronos_int32_t GLfixed;

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptr;
#else
typedef khronos_intptr_t GLintptr;
#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptrARB;
#else
typedef khronos_intptr_t GLintptrARB;
#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptr;
#else
typedef khronos_ssize_t GLsizeiptr;
#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptrARB;
#else
typedef khronos_ssize_t GLsizeiptrARB;
#endif

typedef khronos_int64_t GLint64;

typedef khronos_int64_t GLint64EXT;

typedef khronos_uint64_t GLuint64;

typedef khronos_uint64_t GLuint64EXT;

typedef struct __GLsync *GLsync;

struct _cl_context;

struct _cl_event;

typedef void (GLAD_API_PTR *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

typedef void (GLAD_API_PTR *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

typedef void (GLAD_API_PTR *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

typedef void (GLAD_API_PTR *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);

typedef unsigned short GLhalfNV;

typedef GLintptr GLvdpauSurfaceNV;

typedef void (GLAD_API_PTR *GLVULKANPROCNV)(void);



#define GL_VERSION_1_0 1
#define GL_VERSION_1_1 1


typedef void (GLAD_API_PTR *PFNGLACCUMPROC)(GLenum op, GLfloat value);
typedef void (GLAD_API_PTR *PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
typedef GLboolean (GLAD_API_PTR *PFNGLARETEXTURESRESIDENTPROC)(GLsizei n, const GLuint * textures, GLboolean * residences);
typedef void (GLAD_API_PTR *PFNGLARRAYELEMENTPROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLBEGINPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void (GLAD_API_PTR *PFNGLBITMAPPROC)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
typedef void (GLAD_API_PTR *PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void (GLAD_API_PTR *PFNGLCALLLISTPROC)(GLuint list);
typedef void (GLAD_API_PTR *PFNGLCALLLISTSPROC)(GLsizei n, GLenum type, const void * lists);
typedef void (GLAD_API_PTR *PFNGLCLEARPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLCLEARACCUMPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCLEARDEPTHPROC)(GLdouble depth);
typedef void (GLAD_API_PTR *PFNGLCLEARINDEXPROC)(GLfloat c);
typedef void (GLAD_API_PTR *PFNGLCLEARSTENCILPROC)(GLint s);
typedef void (GLAD_API_PTR *PFNGLCLIPPLANEPROC)(GLenum plane, const GLdouble * equation);
typedef void (GLAD_API_PTR *PFNGLCOLOR3BPROC)(GLbyte red, GLbyte green, GLbyte blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3DPROC)(GLdouble red, GLdouble green, GLdouble blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3FPROC)(GLfloat red, GLfloat green, GLfloat blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3IPROC)(GLint red, GLint green, GLint blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3SPROC)(GLshort red, GLshort green, GLshort blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UBPROC)(GLubyte red, GLubyte green, GLubyte blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UBVPROC)(const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UIPROC)(GLuint red, GLuint green, GLuint blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3UIVPROC)(const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR3USPROC)(GLushort red, GLushort green, GLushort blue);
typedef void (GLAD_API_PTR *PFNGLCOLOR3USVPROC)(const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4BPROC)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4DPROC)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4IPROC)(GLint red, GLint green, GLint blue, GLint alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4SPROC)(GLshort red, GLshort green, GLshort blue, GLshort alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UBVPROC)(const GLubyte * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UIPROC)(GLuint red, GLuint green, GLuint blue, GLuint alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4UIVPROC)(const GLuint * v);
typedef void (GLAD_API_PTR *PFNGLCOLOR4USPROC)(GLushort red, GLushort green, GLushort blue, GLushort alpha);
typedef void (GLAD_API_PTR *PFNGLCOLOR4USVPROC)(const GLushort * v);
typedef void (GLAD_API_PTR *PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
typedef void (GLAD_API_PTR *PFNGLCOLORMATERIALPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLCOLORPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLCOPYPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
typedef void (GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLCULLFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLDELETELISTSPROC)(GLuint list, GLsizei range);
typedef void (GLAD_API_PTR *PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void (GLAD_API_PTR *PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void (GLAD_API_PTR *PFNGLDEPTHRANGEPROC)(GLdouble n, GLdouble f);
typedef void (GLAD_API_PTR *PFNGLDISABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
typedef void (GLAD_API_PTR *PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
typedef void (GLAD_API_PTR *PFNGLDRAWBUFFERPROC)(GLenum buf);
typedef void (GLAD_API_PTR *PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void * indices);
typedef void (GLAD_API_PTR *PFNGLDRAWPIXELSPROC)(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPROC)(GLboolean flag);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGPOINTERPROC)(GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLEDGEFLAGVPROC)(const GLboolean * flag);
typedef void (GLAD_API_PTR *PFNGLENABLEPROC)(GLenum cap);
typedef void (GLAD_API_PTR *PFNGLENABLECLIENTSTATEPROC)(GLenum array);
typedef void (GLAD_API_PTR *PFNGLENDPROC)(void);
typedef void (GLAD_API_PTR *PFNGLENDLISTPROC)(void);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1DPROC)(GLdouble u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1DVPROC)(const GLdouble * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1FPROC)(GLfloat u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD1FVPROC)(const GLfloat * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2DPROC)(GLdouble u, GLdouble v);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2DVPROC)(const GLdouble * u);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2FPROC)(GLfloat u, GLfloat v);
typedef void (GLAD_API_PTR *PFNGLEVALCOORD2FVPROC)(const GLfloat * u);
typedef void (GLAD_API_PTR *PFNGLEVALMESH1PROC)(GLenum mode, GLint i1, GLint i2);
typedef void (GLAD_API_PTR *PFNGLEVALMESH2PROC)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
typedef void (GLAD_API_PTR *PFNGLEVALPOINT1PROC)(GLint i);
typedef void (GLAD_API_PTR *PFNGLEVALPOINT2PROC)(GLint i, GLint j);
typedef void (GLAD_API_PTR *PFNGLFEEDBACKBUFFERPROC)(GLsizei size, GLenum type, GLfloat * buffer);
typedef void (GLAD_API_PTR *PFNGLFINISHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFLUSHPROC)(void);
typedef void (GLAD_API_PTR *PFNGLFOGFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLFOGFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLFOGIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLFOGIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLFRONTFACEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLFRUSTUMPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef GLuint (GLAD_API_PTR *PFNGLGENLISTSPROC)(GLsizei range);
typedef void (GLAD_API_PTR *PFNGLGENTEXTURESPROC)(GLsizei n, GLuint * textures);
typedef void (GLAD_API_PTR *PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean * data);
typedef void (GLAD_API_PTR *PFNGLGETCLIPPLANEPROC)(GLenum plane, GLdouble * equation);
typedef void (GLAD_API_PTR *PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble * data);
typedef GLenum (GLAD_API_PTR *PFNGLGETERRORPROC)(void);
typedef void (GLAD_API_PTR *PFNGLGETFLOATVPROC)(GLenum pname, GLfloat * data);
typedef void (GLAD_API_PTR *PFNGLGETINTEGERVPROC)(GLenum pname, GLint * data);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETLIGHTIVPROC)(GLenum light, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETMAPDVPROC)(GLenum target, GLenum query, GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLGETMAPFVPROC)(GLenum target, GLenum query, GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLGETMAPIVPROC)(GLenum target, GLenum query, GLint * v);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETMATERIALIVPROC)(GLenum face, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPFVPROC)(GLenum map, GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPUIVPROC)(GLenum map, GLuint * values);
typedef void (GLAD_API_PTR *PFNGLGETPIXELMAPUSVPROC)(GLenum map, GLushort * values);
typedef void (GLAD_API_PTR *PFNGLGETPOINTERVPROC)(GLenum pname, void ** params);
typedef void (GLAD_API_PTR *PFNGLGETPOLYGONSTIPPLEPROC)(GLubyte * mask);
typedef const GLubyte * (GLAD_API_PTR *PFNGLGETSTRINGPROC)(GLenum name);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENDVPROC)(GLenum coord, GLenum pname, GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENFVPROC)(GLenum coord, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXGENIVPROC)(GLenum coord, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint * params);
typedef void (GLAD_API_PTR *PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLINDEXMASKPROC)(GLuint mask);
typedef void (GLAD_API_PTR *PFNGLINDEXPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLINDEXDPROC)(GLdouble c);
typedef void (GLAD_API_PTR *PFNGLINDEXDVPROC)(const GLdouble * c);
typedef void (GLAD_API_PTR *PFNGLINDEXFPROC)(GLfloat c);
typedef void (GLAD_API_PTR *PFNGLINDEXFVPROC)(const GLfloat * c);
typedef void (GLAD_API_PTR *PFNGLINDEXIPROC)(GLint c);
typedef void (GLAD_API_PTR *PFNGLINDEXIVPROC)(const GLint * c);
typedef void (GLAD_API_PTR *PFNGLINDEXSPROC)(GLshort c);
typedef void (GLAD_API_PTR *PFNGLINDEXSVPROC)(const GLshort * c);
typedef void (GLAD_API_PTR *PFNGLINDEXUBPROC)(GLubyte c);
typedef void (GLAD_API_PTR *PFNGLINDEXUBVPROC)(const GLubyte * c);
typedef void (GLAD_API_PTR *PFNGLINITNAMESPROC)(void);
typedef void (GLAD_API_PTR *PFNGLINTERLEAVEDARRAYSPROC)(GLenum format, GLsizei stride, const void * pointer);
typedef GLboolean (GLAD_API_PTR *PFNGLISENABLEDPROC)(GLenum cap);
typedef GLboolean (GLAD_API_PTR *PFNGLISLISTPROC)(GLuint list);
typedef GLboolean (GLAD_API_PTR *PFNGLISTEXTUREPROC)(GLuint texture);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELFVPROC)(GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLLIGHTMODELIVPROC)(GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTFPROC)(GLenum light, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLLIGHTFVPROC)(GLenum light, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLLIGHTIPROC)(GLenum light, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLLIGHTIVPROC)(GLenum light, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLLINESTIPPLEPROC)(GLint factor, GLushort pattern);
typedef void (GLAD_API_PTR *PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void (GLAD_API_PTR *PFNGLLISTBASEPROC)(GLuint base);
typedef void (GLAD_API_PTR *PFNGLLOADIDENTITYPROC)(void);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXDPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLLOADMATRIXFPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLLOADNAMEPROC)(GLuint name);
typedef void (GLAD_API_PTR *PFNGLLOGICOPPROC)(GLenum opcode);
typedef void (GLAD_API_PTR *PFNGLMAP1DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
typedef void (GLAD_API_PTR *PFNGLMAP1FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLMAP2DPROC)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
typedef void (GLAD_API_PTR *PFNGLMAP2FPROC)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
typedef void (GLAD_API_PTR *PFNGLMAPGRID1DPROC)(GLint un, GLdouble u1, GLdouble u2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID1FPROC)(GLint un, GLfloat u1, GLfloat u2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID2DPROC)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
typedef void (GLAD_API_PTR *PFNGLMAPGRID2FPROC)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
typedef void (GLAD_API_PTR *PFNGLMATERIALFPROC)(GLenum face, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLMATERIALFVPROC)(GLenum face, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLMATERIALIPROC)(GLenum face, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLMATERIALIVPROC)(GLenum face, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLMATRIXMODEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXDPROC)(const GLdouble * m);
typedef void (GLAD_API_PTR *PFNGLMULTMATRIXFPROC)(const GLfloat * m);
typedef void (GLAD_API_PTR *PFNGLNEWLISTPROC)(GLuint list, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLNORMAL3BPROC)(GLbyte nx, GLbyte ny, GLbyte nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3BVPROC)(const GLbyte * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3DPROC)(GLdouble nx, GLdouble ny, GLdouble nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny, GLfloat nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3IPROC)(GLint nx, GLint ny, GLint nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLNORMAL3SPROC)(GLshort nx, GLshort ny, GLshort nz);
typedef void (GLAD_API_PTR *PFNGLNORMAL3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLORTHOPROC)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
typedef void (GLAD_API_PTR *PFNGLPASSTHROUGHPROC)(GLfloat token);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPFVPROC)(GLenum map, GLsizei mapsize, const GLfloat * values);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPUIVPROC)(GLenum map, GLsizei mapsize, const GLuint * values);
typedef void (GLAD_API_PTR *PFNGLPIXELMAPUSVPROC)(GLenum map, GLsizei mapsize, const GLushort * values);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFERFPROC)(GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLPIXELTRANSFERIPROC)(GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLPIXELZOOMPROC)(GLfloat xfactor, GLfloat yfactor);
typedef void (GLAD_API_PTR *PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void (GLAD_API_PTR *PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
typedef void (GLAD_API_PTR *PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
typedef void (GLAD_API_PTR *PFNGLPOLYGONSTIPPLEPROC)(const GLubyte * mask);
typedef void (GLAD_API_PTR *PFNGLPOPATTRIBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPCLIENTATTRIBPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPMATRIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPOPNAMEPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPRIORITIZETEXTURESPROC)(GLsizei n, const GLuint * textures, const GLfloat * priorities);
typedef void (GLAD_API_PTR *PFNGLPUSHATTRIBPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLPUSHCLIENTATTRIBPROC)(GLbitfield mask);
typedef void (GLAD_API_PTR *PFNGLPUSHMATRIXPROC)(void);
typedef void (GLAD_API_PTR *PFNGLPUSHNAMEPROC)(GLuint name);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2DPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2FPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2IPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2SPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3IPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLRASTERPOS4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLREADBUFFERPROC)(GLenum src);
typedef void (GLAD_API_PTR *PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);
typedef void (GLAD_API_PTR *PFNGLRECTDPROC)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
typedef void (GLAD_API_PTR *PFNGLRECTDVPROC)(const GLdouble * v1, const GLdouble * v2);
typedef void (GLAD_API_PTR *PFNGLRECTFPROC)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
typedef void (GLAD_API_PTR *PFNGLRECTFVPROC)(const GLfloat * v1, const GLfloat * v2);
typedef void (GLAD_API_PTR *PFNGLRECTIPROC)(GLint x1, GLint y1, GLint x2, GLint y2);
typedef void (GLAD_API_PTR *PFNGLRECTIVPROC)(const GLint * v1, const GLint * v2);
typedef void (GLAD_API_PTR *PFNGLRECTSPROC)(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
typedef void (GLAD_API_PTR *PFNGLRECTSVPROC)(const GLshort * v1, const GLshort * v2);
typedef GLint (GLAD_API_PTR *PFNGLRENDERMODEPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLROTATEDPROC)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLROTATEFPROC)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLSCALEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
typedef void (GLAD_API_PTR *PFNGLSELECTBUFFERPROC)(GLsizei size, GLuint * buffer);
typedef void (GLAD_API_PTR *PFNGLSHADEMODELPROC)(GLenum mode);
typedef void (GLAD_API_PTR *PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void (GLAD_API_PTR *PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1DPROC)(GLdouble s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1FPROC)(GLfloat s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1IPROC)(GLint s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1SPROC)(GLshort s);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD1SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2DPROC)(GLdouble s, GLdouble t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FPROC)(GLfloat s, GLfloat t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2IPROC)(GLint s, GLint t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2SPROC)(GLshort s, GLshort t);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3DPROC)(GLdouble s, GLdouble t, GLdouble r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3FPROC)(GLfloat s, GLfloat t, GLfloat r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3IPROC)(GLint s, GLint t, GLint r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3SPROC)(GLshort s, GLshort t, GLshort r);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4DPROC)(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FPROC)(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4IPROC)(GLint s, GLint t, GLint r, GLint q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4SPROC)(GLshort s, GLshort t, GLshort r, GLshort q);
typedef void (GLAD_API_PTR *PFNGLTEXCOORD4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLTEXENVFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXENVFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXENVIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXENVIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENDPROC)(GLenum coord, GLenum pname, GLdouble param);
typedef void (GLAD_API_PTR *PFNGLTEXGENDVPROC)(GLenum coord, GLenum pname, const GLdouble * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENFPROC)(GLenum coord, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXGENFVPROC)(GLenum coord, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXGENIPROC)(GLenum coord, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXGENIVPROC)(GLenum coord, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat * params);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
typedef void (GLAD_API_PTR *PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint * params);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEDPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEX2DPROC)(GLdouble x, GLdouble y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2FPROC)(GLfloat x, GLfloat y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2IPROC)(GLint x, GLint y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX2SPROC)(GLshort x, GLshort y);
typedef void (GLAD_API_PTR *PFNGLVERTEX2SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3DPROC)(GLdouble x, GLdouble y, GLdouble z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3FPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3IPROC)(GLint x, GLint y, GLint z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX3SPROC)(GLshort x, GLshort y, GLshort z);
typedef void (GLAD_API_PTR *PFNGLVERTEX3SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4DPROC)(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4DVPROC)(const GLdouble * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4FPROC)(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4FVPROC)(const GLfloat * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4IPROC)(GLint x, GLint y, GLint z, GLint w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4IVPROC)(const GLint * v);
typedef void (GLAD_API_PTR *PFNGLVERTEX4SPROC)(GLshort x, GLshort y, GLshort z, GLshort w);
typedef void (GLAD_API_PTR *PFNGLVERTEX4SVPROC)(const GLshort * v);
typedef void (GLAD_API_PTR *PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type, GLsizei stride, const void * pointer);
typedef void (GLAD_API_PTR *PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);

GLAD_API_CALL PFNGLACCUMPROC glad_glAccum;
#define glAccum glad_glAccum
GLAD_API_CALL PFNGLALPHAFUNCPROC glad_glAlphaFunc;
#define glAlphaFunc glad_glAlphaFunc
GLAD_API_CALL PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident;
#define glAreTexturesResident glad_glAreTexturesResident
GLAD_API_CALL PFNGLARRAYELEMENTPROC glad_glArrayElement;
#define glArrayElement glad_glArrayElement
GLAD_API_CALL PFNGLBEGINPROC glad_glBegin;
#define glBegin glad_glBegin
GLAD_API_CALL PFNGLBINDTEXTUREPROC glad_glBindTexture;
#define glBindTexture glad_glBindTexture
GLAD_API_CALL PFNGLBITMAPPROC glad_glBitmap;
#define glBitmap glad_glBitmap
GLAD_API_CALL PFNGLBLENDFUNCPROC glad_glBlendFunc;
#define glBlendFunc glad_glBlendFunc
GLAD_API_CALL PFNGLCALLLISTPROC glad_glCallList;
#define glCallList glad_glCallList
GLAD_API_CALL PFNGLCALLLISTSPROC glad_glCallLists;
#define glCallLists glad_glCallLists
GLAD_API_CALL PFNGLCLEARPROC glad_glClear;
#define glClear glad_glClear
GLAD_API_CALL PFNGLCLEARACCUMPROC glad_glClearAccum;
#define glClearAccum glad_glClearAccum
GLAD_API_CALL PFNGLCLEARCOLORPROC glad_glClearColor;
#define glClearColor glad_glClearColor
GLAD_API_CALL PFNGLCLEARDEPTHPROC glad_glClearDepth;
#define glClearDepth glad_glClearDepth
GLAD_API_CALL PFNGLCLEARINDEXPROC glad_glClearIndex;
#define glClearIndex glad_glClearIndex
GLAD_API_CALL PFNGLCLEARSTENCILPROC glad_glClearStencil;
#define glClearStencil glad_glClearStencil
GLAD_API_CALL PFNGLCLIPPLANEPROC glad_glClipPlane;
#define glClipPlane glad_glClipPlane
GLAD_API_CALL PFNGLCOLOR3BPROC glad_glColor3b;
#define glColor3b glad_glColor3b
GLAD_API_CALL PFNGLCOLOR3BVPROC glad_glColor3bv;
#define glColor3bv glad_glColor3bv
GLAD_API_CALL PFNGLCOLOR3DPROC glad_glColor3d;
#define glColor3d glad_glColor3d
GLAD_API_CALL PFNGLCOLOR3DVPROC glad_glColor3dv;
#define glColor3dv glad_glColor3dv
GLAD_API_CALL PFNGLCOLOR3FPROC glad_glColor3f;
#define glColor3f glad_glColor3f
GLAD_API_CALL PFNGLCOLOR3FVPROC glad_glColor3fv;
#define glColor3fv glad_glColor3fv
GLAD_API_CALL PFNGLCOLOR3IPROC glad_glColor3i;
#define glColor3i glad_glColor3i
GLAD_API_CALL PFNGLCOLOR3IVPROC glad_glColor3iv;
#define glColor3iv glad_glColor3iv
GLAD_API_CALL PFNGLCOLOR3SPROC glad_glColor3s;
#define glColor3s glad_glColor3s
GLAD_API_CALL PFNGLCOLOR3SVPROC glad_glColor3sv;
#define glColor3sv glad_glColor3sv
GLAD_API_CALL PFNGLCOLOR3UBPROC glad_glColor3ub;
#define glColor3ub glad_glColor3ub
GLAD_API_CALL PFNGLCOLOR3UBVPROC glad_glColor3ubv;
#define glColor3ubv glad_glColor3ubv
GLAD_API_CALL PFNGLCOLOR3UIPROC glad_glColor3ui;
#define glColor3ui glad_glColor3ui
GLAD_API_CALL PFNGLCOLOR3UIVPROC glad_glColor3uiv;
#define glColor3uiv glad_glColor3uiv
GLAD_API_CALL PFNGLCOLOR3USPROC glad_glColor3us;
#define glColor3us glad_glColor3us
GLAD_API_CALL PFNGLCOLOR3USVPROC glad_glColor3usv;
#define glColor3usv glad_glColor3usv
GLAD_API_CALL PFNGLCOLOR4BPROC glad_glColor4b;
#define glColor4b glad_glColor4b
GLAD_API_CALL PFNGLCOLOR4BVPROC glad_glColor4bv;
#define glColor4bv glad_glColor4bv
GLAD_API_CALL PFNGLCOLOR4DPROC glad_glColor4d;
#define glColor4d glad_glColor4d
GLAD_API_CALL PFNGLCOLOR4DVPROC glad_glColor4dv;
#define glColor4dv glad_glColor4dv
GLAD_API_CALL PFNGLCOLOR4FPROC glad_glColor4f;
#define glColor4f glad_glColor4f
GLAD_API_CALL PFNGLCOLOR4FVPROC glad_glColor4fv;
#define glColor4fv glad_glColor4fv
GLAD_API_CALL PFNGLCOLOR4IPROC glad_glColor4i;
#define glColor4i glad_glColor4i
GLAD_API_CALL PFNGLCOLOR4IVPROC glad_glColor4iv;
#define glColor4iv glad_glColor4iv
GLAD_API_CALL PFNGLCOLOR4SPROC glad_glColor4s;
#define glColor4s glad_glColor4s
GLAD_API_CALL PFNGLCOLOR4SVPROC glad_glColor4sv;
#define glColor4sv glad_glColor4sv
GLAD_API_CALL PFNGLCOLOR4UBPROC glad_glColor4ub;
#define glColor4ub glad_glColor4ub
GLAD_API_CALL PFNGLCOLOR4UBVPROC glad_glColor4ubv;
#define glColor4ubv glad_glColor4ubv
GLAD_API_CALL PFNGLCOLOR4UIPROC glad_glColor4ui;
#define glColor4ui glad_glColor4ui
GLAD_API_CALL PFNGLCOLOR4UIVPROC glad_glColor4uiv;
#define glColor4uiv glad_glColor4uiv
GLAD_API_CALL PFNGLCOLOR4USPROC glad_glColor4us;
#define glColor4us glad_glColor4us
GLAD_API_CALL PFNGLCOLOR4USVPROC glad_glColor4usv;
#define glColor4usv glad_glColor4usv
GLAD_API_CALL PFNGLCOLORMASKPROC glad_glColorMask;
#define glColorMask glad_glColorMask
GLAD_API_CALL PFNGLCOLORMATERIALPROC glad_glColorMaterial;
#define glColorMaterial glad_glColorMaterial
GLAD_API_CALL PFNGLCOLORPOINTERPROC glad_glColorPointer;
#define glColorPointer glad_glColorPointer
GLAD_API_CALL PFNGLCOPYPIXELSPROC glad_glCopyPixels;
#define glCopyPixels glad_glCopyPixels
GLAD_API_CALL PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;
#define glCopyTexImage1D glad_glCopyTexImage1D
GLAD_API_CALL PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;
#define glCopyTexImage2D glad_glCopyTexImage2D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;
#define glCopyTexSubImage1D glad_glCopyTexSubImage1D
GLAD_API_CALL PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;
#define glCopyTexSubImage2D glad_glCopyTexSubImage2D
GLAD_API_CALL PFNGLCULLFACEPROC glad_glCullFace;
#define glCullFace glad_glCullFace
GLAD_API_CALL PFNGLDELETELISTSPROC glad_glDeleteLists;
#define glDeleteLists glad_glDeleteLists
GLAD_API_CALL PFNGLDELETETEXTURESPROC glad_glDeleteTextures;
#define glDeleteTextures glad_glDeleteTextures
GLAD_API_CALL PFNGLDEPTHFUNCPROC glad_glDepthFunc;
#define glDepthFunc glad_glDepthFunc
GLAD_API_CALL PFNGLDEPTHMASKPROC glad_glDepthMask;
#define glDepthMask glad_glDepthMask
GLAD_API_CALL PFNGLDEPTHRANGEPROC glad_glDepthRange;
#define glDepthRange glad_glDepthRange
GLAD_API_CALL PFNGLDISABLEPROC glad_glDisable;
#define glDisable glad_glDisable
GLAD_API_CALL PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState;
#define glDisableClientState glad_glDisableClientState
GLAD_API_CALL PFNGLDRAWARRAYSPROC glad_glDrawArrays;
#define glDrawArrays glad_glDrawArrays
GLAD_API_CALL PFNGLDRAWBUFFERPROC glad_glDrawBuffer;
#define glDrawBuffer glad_glDrawBuffer
GLAD_API_CALL PFNGLDRAWELEMENTSPROC glad_glDrawElements;
#define glDrawElements glad_glDrawElements
GLAD_API_CALL PFNGLDRAWPIXELSPROC glad_glDrawPixels;
#define glDrawPixels glad_glDrawPixels
GLAD_API_CALL PFNGLEDGEFLAGPROC glad_glEdgeFlag;
#define glEdgeFlag glad_glEdgeFlag
GLAD_API_CALL PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer;
#define glEdgeFlagPointer glad_glEdgeFlagPointer
GLAD_API_CALL PFNGLEDGEFLAGVPROC glad_glEdgeFlagv;
#define glEdgeFlagv glad_glEdgeFlagv
GLAD_API_CALL PFNGLENABLEPROC glad_glEnable;
#define glEnable glad_glEnable
GLAD_API_CALL PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState;
#define glEnableClientState glad_glEnableClientState
GLAD_API_CALL PFNGLENDPROC glad_glEnd;
#define glEnd glad_glEnd
GLAD_API_CALL PFNGLENDLISTPROC glad_glEndList;
#define glEndList glad_glEndList
GLAD_API_CALL PFNGLEVALCOORD1DPROC glad_glEvalCoord1d;
#define glEvalCoord1d glad_glEvalCoord1d
GLAD_API_CALL PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv;
#define glEvalCoord1dv glad_glEvalCoord1dv
GLAD_API_CALL PFNGLEVALCOORD1FPROC glad_glEvalCoord1f;
#define glEvalCoord1f glad_glEvalCoord1f
GLAD_API_CALL PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv;
#define glEvalCoord1fv glad_glEvalCoord1fv
GLAD_API_CALL PFNGLEVALCOORD2DPROC glad_glEvalCoord2d;
#define glEvalCoord2d glad_glEvalCoord2d
GLAD_API_CALL PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv;
#define glEvalCoord2dv glad_glEvalCoord2dv
GLAD_API_CALL PFNGLEVALCOORD2FPROC glad_glEvalCoord2f;
#define glEvalCoord2f glad_glEvalCoord2f
GLAD_API_CALL PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv;
#define glEvalCoord2fv glad_glEvalCoord2fv
GLAD_API_CALL PFNGLEVALMESH1PROC glad_glEvalMesh1;
#define glEvalMesh1 glad_glEvalMesh1
GLAD_API_CALL PFNGLEVALMESH2PROC glad_glEvalMesh2;
#define glEvalMesh2 glad_glEvalMesh2
GLAD_API_CALL PFNGLEVALPOINT1PROC glad_glEvalPoint1;
#define glEvalPoint1 glad_glEvalPoint1
GLAD_API_CALL PFNGLEVALPOINT2PROC glad_glEvalPoint2;
#define glEvalPoint2 glad_glEvalPoint2
GLAD_API_CALL PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer;
#define glFeedbackBuffer glad_glFeedbackBuffer
GLAD_API_CALL PFNGLFINISHPROC glad_glFinish;
#define glFinish glad_glFinish
GLAD_API_CALL PFNGLFLUSHPROC glad_glFlush;
#define glFlush glad_glFlush
GLAD_API_CALL PFNGLFOGFPROC glad_glFogf;
#define glFogf glad_glFogf
GLAD_API_CALL PFNGLFOGFVPROC glad_glFogfv;
#define glFogfv glad_glFogfv
GLAD_API_CALL PFNGLFOGIPROC glad_glFogi;
#define glFogi glad_glFogi
GLAD_API_CALL PFNGLFOGIVPROC glad_glFogiv;
#define glFogiv glad_glFogiv
GLAD_API_CALL PFNGLFRONTFACEPROC glad_glFrontFace;
#define glFrontFace glad_glFrontFace
GLAD_API_CALL PFNGLFRUSTUMPROC glad_glFrustum;
#define glFrustum glad_glFrustum
GLAD_API_CALL PFNGLGENLISTSPROC glad_glGenLists;
#define glGenLists glad_glGenLists
GLAD_API_CALL PFNGLGENTEXTURESPROC glad_glGenTextures;
#define glGenTextures glad_glGenTextures
GLAD_API_CALL PFNGLGETBOOLEANVPROC glad_glGetBooleanv;
#define glGetBooleanv glad_glGetBooleanv
GLAD_API_CALL PFNGLGETCLIPPLANEPROC glad_glGetClipPlane;
#define glGetClipPlane glad_glGetClipPlane
GLAD_API_CALL PFNGLGETDOUBLEVPROC glad_glGetDoublev;
#define glGetDoublev glad_glGetDoublev
GLAD_API_CALL PFNGLGETERRORPROC glad_glGetError;
#define glGetError glad_glGetError
GLAD_API_CALL PFNGLGETFLOATVPROC glad_glGetFloatv;
#define glGetFloatv glad_glGetFloatv
GLAD_API_CALL PFNGLGETINTEGERVPROC glad_glGetIntegerv;
#define glGetIntegerv glad_glGetIntegerv
GLAD_API_CALL PFNGLGETLIGHTFVPROC glad_glGetLightfv;
#define glGetLightfv glad_glGetLightfv
GLAD_API_CALL PFNGLGETLIGHTIVPROC glad_glGetLightiv;
#define glGetLightiv glad_glGetLightiv
GLAD_API_CALL PFNGLGETMAPDVPROC glad_glGetMapdv;
#define glGetMapdv glad_glGetMapdv
GLAD_API_CALL PFNGLGETMAPFVPROC glad_glGetMapfv;
#define glGetMapfv glad_glGetMapfv
GLAD_API_CALL PFNGLGETMAPIVPROC glad_glGetMapiv;
#define glGetMapiv glad_glGetMapiv
GLAD_API_CALL PFNGLGETMATERIALFVPROC glad_glGetMaterialfv;
#define glGetMaterialfv glad_glGetMaterialfv
GLAD_API_CALL PFNGLGETMATERIALIVPROC glad_glGetMaterialiv;
#define glGetMaterialiv glad_glGetMaterialiv
GLAD_API_CALL PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv;
#define glGetPixelMapfv glad_glGetPixelMapfv
GLAD_API_CALL PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv;
#define glGetPixelMapuiv glad_glGetPixelMapuiv
GLAD_API_CALL PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv;
#define glGetPixelMapusv glad_glGetPixelMapusv
GLAD_API_CALL PFNGLGETPOINTERVPROC glad_glGetPointerv;
#define glGetPointerv glad_glGetPointerv
GLAD_API_CALL PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple;
#define glGetPolygonStipple glad_glGetPolygonStipple
GLAD_API_CALL PFNGLGETSTRINGPROC glad_glGetString;
#define glGetString glad_glGetString
GLAD_API_CALL PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv;
#define glGetTexEnvfv glad_glGetTexEnvfv
GLAD_API_CALL PFNGLGETTEXENVIVPROC glad_glGetTexEnviv;
#define glGetTexEnviv glad_glGetTexEnviv
GLAD_API_CALL PFNGLGETTEXGENDVPROC glad_glGetTexGendv;
#define glGetTexGendv glad_glGetTexGendv
GLAD_API_CALL PFNGLGETTEXGENFVPROC glad_glGetTexGenfv;
#define glGetTexGenfv glad_glGetTexGenfv
GLAD_API_CALL PFNGLGETTEXGENIVPROC glad_glGetTexGeniv;
#define glGetTexGeniv glad_glGetTexGeniv
GLAD_API_CALL PFNGLGETTEXIMAGEPROC glad_glGetTexImage;
#define glGetTexImage glad_glGetTexImage
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;
#define glGetTexLevelParameterfv glad_glGetTexLevelParameterfv
GLAD_API_CALL PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;
#define glGetTexLevelParameteriv glad_glGetTexLevelParameteriv
GLAD_API_CALL PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;
#define glGetTexParameterfv glad_glGetTexParameterfv
GLAD_API_CALL PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;
#define glGetTexParameteriv glad_glGetTexParameteriv
GLAD_API_CALL PFNGLHINTPROC glad_glHint;
#define glHint glad_glHint
GLAD_API_CALL PFNGLINDEXMASKPROC glad_glIndexMask;
#define glIndexMask glad_glIndexMask
GLAD_API_CALL PFNGLINDEXPOINTERPROC glad_glIndexPointer;
#define glIndexPointer glad_glIndexPointer
GLAD_API_CALL PFNGLINDEXDPROC glad_glIndexd;
#define glIndexd glad_glIndexd
GLAD_API_CALL PFNGLINDEXDVPROC glad_glIndexdv;
#define glIndexdv glad_glIndexdv
GLAD_API_CALL PFNGLINDEXFPROC glad_glIndexf;
#define glIndexf glad_glIndexf
GLAD_API_CALL PFNGLINDEXFVPROC glad_glIndexfv;
#define glIndexfv glad_glIndexfv
GLAD_API_CALL PFNGLINDEXIPROC glad_glIndexi;
#define glIndexi glad_glIndexi
GLAD_API_CALL PFNGLINDEXIVPROC glad_glIndexiv;
#define glIndexiv glad_glIndexiv
GLAD_API_CALL PFNGLINDEXSPROC glad_glIndexs;
#define glIndexs glad_glIndexs
GLAD_API_CALL PFNGLINDEXSVPROC glad_glIndexsv;
#define glIndexsv glad_glIndexsv
GLAD_API_CALL PFNGLINDEXUBPROC glad_glIndexub;
#define glIndexub glad_glIndexub
GLAD_API_CALL PFNGLINDEXUBVPROC glad_glIndexubv;
#define glIndexubv glad_glIndexubv
GLAD_API_CALL PFNGLINITNAMESPROC glad_glInitNames;
#define glInitNames glad_glInitNames
GLAD_API_CALL PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays;
#define glInterleavedArrays glad_glInterleavedArrays
GLAD_API_CALL PFNGLISENABLEDPROC glad_glIsEnabled;
#define glIsEnabled glad_glIsEnabled
GLAD_API_CALL PFNGLISLISTPROC glad_glIsList;
#define glIsList glad_glIsList
GLAD_API_CALL PFNGLISTEXTUREPROC glad_glIsTexture;
#define glIsTexture glad_glIsTexture
GLAD_API_CALL PFNGLLIGHTMODELFPROC glad_glLightModelf;
#define glLightModelf glad_glLightModelf
GLAD_API_CALL PFNGLLIGHTMODELFVPROC glad_glLightModelfv;
#define glLightModelfv glad_glLightModelfv
GLAD_API_CALL PFNGLLIGHTMODELIPROC glad_glLightModeli;
#define glLightModeli glad_glLightModeli
GLAD_API_CALL PFNGLLIGHTMODELIVPROC glad_glLightModeliv;
#define glLightModeliv glad_glLightModeliv
GLAD_API_CALL PFNGLLIGHTFPROC glad_glLightf;
#define glLightf glad_glLightf
GLAD_API_CALL PFNGLLIGHTFVPROC glad_glLightfv;
#define glLightfv glad_glLightfv
GLAD_API_CALL PFNGLLIGHTIPROC glad_glLighti;
#define glLighti glad_glLighti
GLAD_API_CALL PFNGLLIGHTIVPROC glad_glLightiv;
#define glLightiv glad_glLightiv
GLAD_API_CALL PFNGLLINESTIPPLEPROC glad_glLineStipple;
#define glLineStipple glad_glLineStipple
GLAD_API_CALL PFNGLLINEWIDTHPROC glad_glLineWidth;
#define glLineWidth glad_glLineWidth
GLAD_API_CALL PFNGLLISTBASEPROC glad_glListBase;
#define glListBase glad_glListBase
GLAD_API_CALL PFNGLLOADIDENTITYPROC glad_glLoadIdentity;
#define glLoadIdentity glad_glLoadIdentity
GLAD_API_CALL PFNGLLOADMATRIXDPROC glad_glLoadMatrixd;
#define glLoadMatrixd glad_glLoadMatrixd
GLAD_API_CALL PFNGLLOADMATRIXFPROC glad_glLoadMatrixf;
#define glLoadMatrixf glad_glLoadMatrixf
GLAD_API_CALL PFNGLLOADNAMEPROC glad_glLoadName;
#define glLoadName glad_glLoadName
GLAD_API_CALL PFNGLLOGICOPPROC glad_glLogicOp;
#define glLogicOp glad_glLogicOp
GLAD_API_CALL PFNGLMAP1DPROC glad_glMap1d;
#define glMap1d glad_glMap1d
GLAD_API_CALL PFNGLMAP1FPROC glad_glMap1f;
#define glMap1f glad_glMap1f
GLAD_API_CALL PFNGLMAP2DPROC glad_glMap2d;
#define glMap2d glad_glMap2d
GLAD_API_CALL PFNGLMAP2FPROC glad_glMap2f;
#define glMap2f glad_glMap2f
GLAD_API_CALL PFNGLMAPGRID1DPROC glad_glMapGrid1d;
#define glMapGrid1d glad_glMapGrid1d
GLAD_API_CALL PFNGLMAPGRID1FPROC glad_glMapGrid1f;
#define glMapGrid1f glad_glMapGrid1f
GLAD_API_CALL PFNGLMAPGRID2DPROC glad_glMapGrid2d;
#define glMapGrid2d glad_glMapGrid2d
GLAD_API_CALL PFNGLMAPGRID2FPROC glad_glMapGrid2f;
#define glMapGrid2f glad_glMapGrid2f
GLAD_API_CALL PFNGLMATERIALFPROC glad_glMaterialf;
#define glMaterialf glad_glMaterialf
GLAD_API_CALL PFNGLMATERIALFVPROC glad_glMaterialfv;
#define glMaterialfv glad_glMaterialfv
GLAD_API_CALL PFNGLMATERIALIPROC glad_glMateriali;
#define glMateriali glad_glMateriali
GLAD_API_CALL PFNGLMATERIALIVPROC glad_glMaterialiv;
#define glMaterialiv glad_glMaterialiv
GLAD_API_CALL PFNGLMATRIXMODEPROC glad_glMatrixMode;
#define glMatrixMode glad_glMatrixMode
GLAD_API_CALL PFNGLMULTMATRIXDPROC glad_glMultMatrixd;
#define glMultMatrixd glad_glMultMatrixd
GLAD_API_CALL PFNGLMULTMATRIXFPROC glad_glMultMatrixf;
#define glMultMatrixf glad_glMultMatrixf
GLAD_API_CALL PFNGLNEWLISTPROC glad_glNewList;
#define glNewList glad_glNewList
GLAD_API_CALL PFNGLNORMAL3BPROC glad_glNormal3b;
#define glNormal3b glad_glNormal3b
GLAD_API_CALL PFNGLNORMAL3BVPROC glad_glNormal3bv;
#define glNormal3bv glad_glNormal3bv
GLAD_API_CALL PFNGLNORMAL3DPROC glad_glNormal3d;
#define glNormal3d glad_glNormal3d
GLAD_API_CALL PFNGLNORMAL3DVPROC glad_glNormal3dv;
#define glNormal3dv glad_glNormal3dv
GLAD_API_CALL PFNGLNORMAL3FPROC glad_glNormal3f;
#define glNormal3f glad_glNormal3f
GLAD_API_CALL PFNGLNORMAL3FVPROC glad_glNormal3fv;
#define glNormal3fv glad_glNormal3fv
GLAD_API_CALL PFNGLNORMAL3IPROC glad_glNormal3i;
#define glNormal3i glad_glNormal3i
GLAD_API_CALL PFNGLNORMAL3IVPROC glad_glNormal3iv;
#define glNormal3iv glad_glNormal3iv
GLAD_API_CALL PFNGLNORMAL3SPROC glad_glNormal3s;
#define glNormal3s glad_glNormal3s
GLAD_API_CALL PFNGLNORMAL3SVPROC glad_glNormal3sv;
#define glNormal3sv glad_glNormal3sv
GLAD_API_CALL PFNGLNORMALPOINTERPROC glad_glNormalPointer;
#define glNormalPointer glad_glNormalPointer
GLAD_API_CALL PFNGLORTHOPROC glad_glOrtho;
#define glOrtho glad_glOrtho
GLAD_API_CALL PFNGLPASSTHROUGHPROC glad_glPassThrough;
#define glPassThrough glad_glPassThrough
GLAD_API_CALL PFNGLPIXELMAPFVPROC glad_glPixelMapfv;
#define glPixelMapfv glad_glPixelMapfv
GLAD_API_CALL PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv;
#define glPixelMapuiv glad_glPixelMapuiv
GLAD_API_CALL PFNGLPIXELMAPUSVPROC glad_glPixelMapusv;
#define glPixelMapusv glad_glPixelMapusv
GLAD_API_CALL PFNGLPIXELSTOREFPROC glad_glPixelStoref;
#define glPixelStoref glad_glPixelStoref
GLAD_API_CALL PFNGLPIXELSTOREIPROC glad_glPixelStorei;
#define glPixelStorei glad_glPixelStorei
GLAD_API_CALL PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf;
#define glPixelTransferf glad_glPixelTransferf
GLAD_API_CALL PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi;
#define glPixelTransferi glad_glPixelTransferi
GLAD_API_CALL PFNGLPIXELZOOMPROC glad_glPixelZoom;
#define glPixelZoom glad_glPixelZoom
GLAD_API_CALL PFNGLPOINTSIZEPROC glad_glPointSize;
#define glPointSize glad_glPointSize
GLAD_API_CALL PFNGLPOLYGONMODEPROC glad_glPolygonMode;
#define glPolygonMode glad_glPolygonMode
GLAD_API_CALL PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;
#define glPolygonOffset glad_glPolygonOffset
GLAD_API_CALL PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple;
#define glPolygonStipple glad_glPolygonStipple
GLAD_API_CALL PFNGLPOPATTRIBPROC glad_glPopAttrib;
#define glPopAttrib glad_glPopAttrib
GLAD_API_CALL PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib;
#define glPopClientAttrib glad_glPopClientAttrib
GLAD_API_CALL PFNGLPOPMATRIXPROC glad_glPopMatrix;
#define glPopMatrix glad_glPopMatrix
GLAD_API_CALL PFNGLPOPNAMEPROC glad_glPopName;
#define glPopName glad_glPopName
GLAD_API_CALL PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures;
#define glPrioritizeTextures glad_glPrioritizeTextures
GLAD_API_CALL PFNGLPUSHATTRIBPROC glad_glPushAttrib;
#define glPushAttrib glad_glPushAttrib
GLAD_API_CALL PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib;
#define glPushClientAttrib glad_glPushClientAttrib
GLAD_API_CALL PFNGLPUSHMATRIXPROC glad_glPushMatrix;
#define glPushMatrix glad_glPushMatrix
GLAD_API_CALL PFNGLPUSHNAMEPROC glad_glPushName;
#define glPushName glad_glPushName
GLAD_API_CALL PFNGLRASTERPOS2DPROC glad_glRasterPos2d;
#define glRasterPos2d glad_glRasterPos2d
GLAD_API_CALL PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv;
#define glRasterPos2dv glad_glRasterPos2dv
GLAD_API_CALL PFNGLRASTERPOS2FPROC glad_glRasterPos2f;
#define glRasterPos2f glad_glRasterPos2f
GLAD_API_CALL PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv;
#define glRasterPos2fv glad_glRasterPos2fv
GLAD_API_CALL PFNGLRASTERPOS2IPROC glad_glRasterPos2i;
#define glRasterPos2i glad_glRasterPos2i
GLAD_API_CALL PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv;
#define glRasterPos2iv glad_glRasterPos2iv
GLAD_API_CALL PFNGLRASTERPOS2SPROC glad_glRasterPos2s;
#define glRasterPos2s glad_glRasterPos2s
GLAD_API_CALL PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv;
#define glRasterPos2sv glad_glRasterPos2sv
GLAD_API_CALL PFNGLRASTERPOS3DPROC glad_glRasterPos3d;
#define glRasterPos3d glad_glRasterPos3d
GLAD_API_CALL PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv;
#define glRasterPos3dv glad_glRasterPos3dv
GLAD_API_CALL PFNGLRASTERPOS3FPROC glad_glRasterPos3f;
#define glRasterPos3f glad_glRasterPos3f
GLAD_API_CALL PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv;
#define glRasterPos3fv glad_glRasterPos3fv
GLAD_API_CALL PFNGLRASTERPOS3IPROC glad_glRasterPos3i;
#define glRasterPos3i glad_glRasterPos3i
GLAD_API_CALL PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv;
#define glRasterPos3iv glad_glRasterPos3iv
GLAD_API_CALL PFNGLRASTERPOS3SPROC glad_glRasterPos3s;
#define glRasterPos3s glad_glRasterPos3s
GLAD_API_CALL PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv;
#define glRasterPos3sv glad_glRasterPos3sv
GLAD_API_CALL PFNGLRASTERPOS4DPROC glad_glRasterPos4d;
#define glRasterPos4d glad_glRasterPos4d
GLAD_API_CALL PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv;
#define glRasterPos4dv glad_glRasterPos4dv
GLAD_API_CALL PFNGLRASTERPOS4FPROC glad_glRasterPos4f;
#define glRasterPos4f glad_glRasterPos4f
GLAD_API_CALL PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv;
#define glRasterPos4fv glad_glRasterPos4fv
GLAD_API_CALL PFNGLRASTERPOS4IPROC glad_glRasterPos4i;
#define glRasterPos4i glad_glRasterPos4i
GLAD_API_CALL PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv;
#define glRasterPos4iv glad_glRasterPos4iv
GLAD_API_CALL PFNGLRASTERPOS4SPROC glad_glRasterPos4s;
#define glRasterPos4s glad_glRasterPos4s
GLAD_API_CALL PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv;
#define glRasterPos4sv glad_glRasterPos4sv
GLAD_API_CALL PFNGLREADBUFFERPROC glad_glReadBuffer;
#define glReadBuffer glad_glReadBuffer
GLAD_API_CALL PFNGLREADPIXELSPROC glad_glReadPixels;
#define glReadPixels glad_glReadPixels
GLAD_API_CALL PFNGLRECTDPROC glad_glRectd;
#define glRectd glad_glRectd
GLAD_API_CALL PFNGLRECTDVPROC glad_glRectdv;
#define glRectdv glad_glRectdv
GLAD_API_CALL PFNGLRECTFPROC glad_glRectf;
#define glRectf glad_glRectf
GLAD_API_CALL PFNGLRECTFVPROC glad_glRectfv;
#define glRectfv glad_glRectfv
GLAD_API_CALL PFNGLRECTIPROC glad_glRecti;
#define glRecti glad_glRecti
GLAD_API_CALL PFNGLRECTIVPROC glad_glRectiv;
#define glRectiv glad_glRectiv
GLAD_API_CALL PFNGLRECTSPROC glad_glRects;
#define glRects glad_glRects
GLAD_API_CALL PFNGLRECTSVPROC glad_glRectsv;
#define glRectsv glad_glRectsv
GLAD_API_CALL PFNGLRENDERMODEPROC glad_glRenderMode;
#define glRenderMode glad_glRenderMode
GLAD_API_CALL PFNGLROTATEDPROC glad_glRotated;
#define glRotated glad_glRotated
GLAD_API_CALL PFNGLROTATEFPROC glad_glRotatef;
#define glRotatef glad_glRotatef
GLAD_API_CALL PFNGLSCALEDPROC glad_glScaled;
#define glScaled glad_glScaled
GLAD_API_CALL PFNGLSCALEFPROC glad_glScalef;
#define glScalef glad_glScalef
GLAD_API_CALL PFNGLSCISSORPROC glad_glScissor;
#define glScissor glad_glScissor
GLAD_API_CALL PFNGLSELECTBUFFERPROC glad_glSelectBuffer;
#define glSelectBuffer glad_glSelectBuffer
GLAD_API_CALL PFNGLSHADEMODELPROC glad_glShadeModel;
#define glShadeModel glad_glShadeModel
GLAD_API_CALL PFNGLSTENCILFUNCPROC glad_glStencilFunc;
#define glStencilFunc glad_glStencilFunc
GLAD_API_CALL PFNGLSTENCILMASKPROC glad_glStencilMask;
#define glStencilMask glad_glStencilMask
GLAD_API_CALL PFNGLSTENCILOPPROC glad_glStencilOp;
#define glStencilOp glad_glStencilOp
GLAD_API_CALL PFNGLTEXCOORD1DPROC glad_glTexCoord1d;
#define glTexCoord1d glad_glTexCoord1d
GLAD_API_CALL PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv;
#define glTexCoord1dv glad_glTexCoord1dv
GLAD_API_CALL PFNGLTEXCOORD1FPROC glad_glTexCoord1f;
#define glTexCoord1f glad_glTexCoord1f
GLAD_API_CALL PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv;
#define glTexCoord1fv glad_glTexCoord1fv
GLAD_API_CALL PFNGLTEXCOORD1IPROC glad_glTexCoord1i;
#define glTexCoord1i glad_glTexCoord1i
GLAD_API_CALL PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv;
#define glTexCoord1iv glad_glTexCoord1iv
GLAD_API_CALL PFNGLTEXCOORD1SPROC glad_glTexCoord1s;
#define glTexCoord1s glad_glTexCoord1s
GLAD_API_CALL PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv;
#define glTexCoord1sv glad_glTexCoord1sv
GLAD_API_CALL PFNGLTEXCOORD2DPROC glad_glTexCoord2d;
#define glTexCoord2d glad_glTexCoord2d
GLAD_API_CALL PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv;
#define glTexCoord2dv glad_glTexCoord2dv
GLAD_API_CALL PFNGLTEXCOORD2FPROC glad_glTexCoord2f;
#define glTexCoord2f glad_glTexCoord2f
GLAD_API_CALL PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv;
#define glTexCoord2fv glad_glTexCoord2fv
GLAD_API_CALL PFNGLTEXCOORD2IPROC glad_glTexCoord2i;
#define glTexCoord2i glad_glTexCoord2i
GLAD_API_CALL PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv;
#define glTexCoord2iv glad_glTexCoord2iv
GLAD_API_CALL PFNGLTEXCOORD2SPROC glad_glTexCoord2s;
#define glTexCoord2s glad_glTexCoord2s
GLAD_API_CALL PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv;
#define glTexCoord2sv glad_glTexCoord2sv
GLAD_API_CALL PFNGLTEXCOORD3DPROC glad_glTexCoord3d;
#define glTexCoord3d glad_glTexCoord3d
GLAD_API_CALL PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv;
#define glTexCoord3dv glad_glTexCoord3dv
GLAD_API_CALL PFNGLTEXCOORD3FPROC glad_glTexCoord3f;
#define glTexCoord3f glad_glTexCoord3f
GLAD_API_CALL PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv;
#define glTexCoord3fv glad_glTexCoord3fv
GLAD_API_CALL PFNGLTEXCOORD3IPROC glad_glTexCoord3i;
#define glTexCoord3i glad_glTexCoord3i
GLAD_API_CALL PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv;
#define glTexCoord3iv glad_glTexCoord3iv
GLAD_API_CALL PFNGLTEXCOORD3SPROC glad_glTexCoord3s;
#define glTexCoord3s glad_glTexCoord3s
GLAD_API_CALL PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv;
#define glTexCoord3sv glad_glTexCoord3sv
GLAD_API_CALL PFNGLTEXCOORD4DPROC glad_glTexCoord4d;
#define glTexCoord4d glad_glTexCoord4d
GLAD_API_CALL PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv;
#define glTexCoord4dv glad_glTexCoord4dv
GLAD_API_CALL PFNGLTEXCOORD4FPROC glad_glTexCoord4f;
#define glTexCoord4f glad_glTexCoord4f
GLAD_API_CALL PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv;
#define glTexCoord4fv glad_glTexCoord4fv
GLAD_API_CALL PFNGLTEXCOORD4IPROC glad_glTexCoord4i;
#define glTexCoord4i glad_glTexCoord4i
GLAD_API_CALL PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv;
#define glTexCoord4iv glad_glTexCoord4iv
GLAD_API_CALL PFNGLTEXCOORD4SPROC glad_glTexCoord4s;
#define glTexCoord4s glad_glTexCoord4s
GLAD_API_CALL PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv;
#define glTexCoord4sv glad_glTexCoord4sv
GLAD_API_CALL PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer;
#define glTexCoordPointer glad_glTexCoordPointer
GLAD_API_CALL PFNGLTEXENVFPROC glad_glTexEnvf;
#define glTexEnvf glad_glTexEnvf
GLAD_API_CALL PFNGLTEXENVFVPROC glad_glTexEnvfv;
#define glTexEnvfv glad_glTexEnvfv
GLAD_API_CALL PFNGLTEXENVIPROC glad_glTexEnvi;
#define glTexEnvi glad_glTexEnvi
GLAD_API_CALL PFNGLTEXENVIVPROC glad_glTexEnviv;
#define glTexEnviv glad_glTexEnviv
GLAD_API_CALL PFNGLTEXGENDPROC glad_glTexGend;
#define glTexGend glad_glTexGend
GLAD_API_CALL PFNGLTEXGENDVPROC glad_glTexGendv;
#define glTexGendv glad_glTexGendv
GLAD_API_CALL PFNGLTEXGENFPROC glad_glTexGenf;
#define glTexGenf glad_glTexGenf
GLAD_API_CALL PFNGLTEXGENFVPROC glad_glTexGenfv;
#define glTexGenfv glad_glTexGenfv
GLAD_API_CALL PFNGLTEXGENIPROC glad_glTexGeni;
#define glTexGeni glad_glTexGeni
GLAD_API_CALL PFNGLTEXGENIVPROC glad_glTexGeniv;
#define glTexGeniv glad_glTexGeniv
GLAD_API_CALL PFNGLTEXIMAGE1DPROC glad_glTexImage1D;
#define glTexImage1D glad_glTexImage1D
GLAD_API_CALL PFNGLTEXIMAGE2DPROC glad_glTexImage2D;
#define glTexImage2D glad_glTexImage2D
GLAD_API_CALL PFNGLTEXPARAMETERFPROC glad_glTexParameterf;
#define glTexParameterf glad_glTexParameterf
GLAD_API_CALL PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;
#define glTexParameterfv glad_glTexParameterfv
GLAD_API_CALL PFNGLTEXPARAMETERIPROC glad_glTexParameteri;
#define glTexParameteri glad_glTexParameteri
GLAD_API_CALL PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;
#define glTexParameteriv glad_glTexParameteriv
GLAD_API_CALL PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;
#define glTexSubImage1D glad_glTexSubImage1D
GLAD_API_CALL PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;
#define glTexSubImage2D glad_glTexSubImage2D
GLAD_API_CALL PFNGLTRANSLATEDPROC glad_glTranslated;
#define glTranslated glad_glTranslated
GLAD_API_CALL PFNGLTRANSLATEFPROC glad_glTranslatef;
#define glTranslatef glad_glTranslatef
GLAD_API_CALL PFNGLVERTEX2DPROC glad_glVertex2d;
#define glVertex2d glad_glVertex2d
GLAD_API_CALL PFNGLVERTEX2DVPROC glad_glVertex2dv;
#define glVertex2dv glad_glVertex2dv
GLAD_API_CALL PFNGLVERTEX2FPROC glad_glVertex2f;
#define glVertex2f glad_glVertex2f
GLAD_API_CALL PFNGLVERTEX2FVPROC glad_glVertex2fv;
#define glVertex2fv glad_glVertex2fv
GLAD_API_CALL PFNGLVERTEX2IPROC glad_glVertex2i;
#define glVertex2i glad_glVertex2i
GLAD_API_CALL PFNGLVERTEX2IVPROC glad_glVertex2iv;
#define glVertex2iv glad_glVertex2iv
GLAD_API_CALL PFNGLVERTEX2SPROC glad_glVertex2s;
#define glVertex2s glad_glVertex2s
GLAD_API_CALL PFNGLVERTEX2SVPROC glad_glVertex2sv;
#define glVertex2sv glad_glVertex2sv
GLAD_API_CALL PFNGLVERTEX3DPROC glad_glVertex3d;
#define glVertex3d glad_glVertex3d
GLAD_API_CALL PFNGLVERTEX3DVPROC glad_glVertex3dv;
#define glVertex3dv glad_glVertex3dv
GLAD_API_CALL PFNGLVERTEX3FPROC glad_glVertex3f;
#define glVertex3f glad_glVertex3f
GLAD_API_CALL PFNGLVERTEX3FVPROC glad_glVertex3fv;
#define glVertex3fv glad_glVertex3fv
GLAD_API_CALL PFNGLVERTEX3IPROC glad_glVertex3i;
#define glVertex3i glad_glVertex3i
GLAD_API_CALL PFNGLVERTEX3IVPROC glad_glVertex3iv;
#define glVertex3iv glad_glVertex3iv
GLAD_API_CALL PFNGLVERTEX3SPROC glad_glVertex3s;
#define glVertex3s glad_glVertex3s
GLAD_API_CALL PFNGLVERTEX3SVPROC glad_glVertex3sv;
#define glVertex3sv glad_glVertex3sv
GLAD_API_CALL PFNGLVERTEX4DPROC glad_glVertex4d;
#define glVertex4d glad_glVertex4d
GLAD_API_CALL PFNGLVERTEX4DVPROC glad_glVertex4dv;
#define glVertex4dv glad_glVertex4dv
GLAD_API_CALL PFNGLVERTEX4FPROC glad_glVertex4f;
#define glVertex4f glad_glVertex4f
GLAD_API_CALL PFNGLVERTEX4FVPROC glad_glVertex4fv;
#define glVertex4fv glad_glVertex4fv
GLAD_API_CALL PFNGLVERTEX4IPROC glad_glVertex4i;
#define glVertex4i glad_glVertex4i
GLAD_API_CALL PFNGLVERTEX4IVPROC glad_glVertex4iv;
#define glVertex4iv glad_glVertex4iv
GLAD_API_CALL PFNGLVERTEX4SPROC glad_glVertex4s;
#define glVertex4s glad_glVertex4s
GLAD_API_CALL PFNGLVERTEX4SVPROC glad_glVertex4sv;
#define glVertex4sv glad_glVertex4sv
GLAD_API_CALL PFNGLVERTEXPOINTERPROC glad_glVertexPointer;
#define glVertexPointer glad_glVertexPointer
GLAD_API_CALL PFNGLVIEWPORTPROC glad_glViewport;
#define glViewport glad_glViewport


GLAD_API_CALL void gladSetGLOnDemandLoader(GLADloadfunc loader);




#ifdef GLAD_GL

GLAD_API_CALL void gladLoaderUnloadGL(void);

#endif

#ifdef __cplusplus
}
#endif
#endif

/* Source */
#ifdef GLAD_GL_IMPLEMENTATION
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef GLAD_IMPL_UTIL_C_
#define GLAD_IMPL_UTIL_C_

#ifdef _MSC_VER
#define GLAD_IMPL_UTIL_SSCANF sscanf_s
#else
#define GLAD_IMPL_UTIL_SSCANF sscanf
#endif

#endif /* GLAD_IMPL_UTIL_C_ */

#ifdef __cplusplus
extern "C" {
#endif




static GLADapiproc glad_gl_internal_loader_get_proc(const char *name);
static GLADloadfunc glad_global_on_demand_gl_loader_func = glad_gl_internal_loader_get_proc;

void gladSetGLOnDemandLoader(GLADloadfunc loader) {
    glad_global_on_demand_gl_loader_func = loader;
}

static GLADapiproc glad_gl_on_demand_loader(const char *name) {
    GLADapiproc result = NULL;
    if (result == NULL && glad_global_on_demand_gl_loader_func != NULL) {
        result = glad_global_on_demand_gl_loader_func(name);
    }
    /* this provokes a segmentation fault if there was no loader or no loader returned something useful */
    return result;
}


static void GLAD_API_PTR glad_on_demand_impl_glAccum(GLenum op, GLfloat value) {
    glad_glAccum = (PFNGLACCUMPROC) glad_gl_on_demand_loader("glAccum");
    glad_glAccum(op, value);
}
PFNGLACCUMPROC glad_glAccum = glad_on_demand_impl_glAccum;
static void GLAD_API_PTR glad_on_demand_impl_glAlphaFunc(GLenum func, GLfloat ref) {
    glad_glAlphaFunc = (PFNGLALPHAFUNCPROC) glad_gl_on_demand_loader("glAlphaFunc");
    glad_glAlphaFunc(func, ref);
}
PFNGLALPHAFUNCPROC glad_glAlphaFunc = glad_on_demand_impl_glAlphaFunc;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences) {
    glad_glAreTexturesResident = (PFNGLARETEXTURESRESIDENTPROC) glad_gl_on_demand_loader("glAreTexturesResident");
    return glad_glAreTexturesResident(n, textures, residences);
}
PFNGLARETEXTURESRESIDENTPROC glad_glAreTexturesResident = glad_on_demand_impl_glAreTexturesResident;
static void GLAD_API_PTR glad_on_demand_impl_glArrayElement(GLint i) {
    glad_glArrayElement = (PFNGLARRAYELEMENTPROC) glad_gl_on_demand_loader("glArrayElement");
    glad_glArrayElement(i);
}
PFNGLARRAYELEMENTPROC glad_glArrayElement = glad_on_demand_impl_glArrayElement;
static void GLAD_API_PTR glad_on_demand_impl_glBegin(GLenum mode) {
    glad_glBegin = (PFNGLBEGINPROC) glad_gl_on_demand_loader("glBegin");
    glad_glBegin(mode);
}
PFNGLBEGINPROC glad_glBegin = glad_on_demand_impl_glBegin;
static void GLAD_API_PTR glad_on_demand_impl_glBindTexture(GLenum target, GLuint texture) {
    glad_glBindTexture = (PFNGLBINDTEXTUREPROC) glad_gl_on_demand_loader("glBindTexture");
    glad_glBindTexture(target, texture);
}
PFNGLBINDTEXTUREPROC glad_glBindTexture = glad_on_demand_impl_glBindTexture;
static void GLAD_API_PTR glad_on_demand_impl_glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) {
    glad_glBitmap = (PFNGLBITMAPPROC) glad_gl_on_demand_loader("glBitmap");
    glad_glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
}
PFNGLBITMAPPROC glad_glBitmap = glad_on_demand_impl_glBitmap;
static void GLAD_API_PTR glad_on_demand_impl_glBlendFunc(GLenum sfactor, GLenum dfactor) {
    glad_glBlendFunc = (PFNGLBLENDFUNCPROC) glad_gl_on_demand_loader("glBlendFunc");
    glad_glBlendFunc(sfactor, dfactor);
}
PFNGLBLENDFUNCPROC glad_glBlendFunc = glad_on_demand_impl_glBlendFunc;
static void GLAD_API_PTR glad_on_demand_impl_glCallList(GLuint list) {
    glad_glCallList = (PFNGLCALLLISTPROC) glad_gl_on_demand_loader("glCallList");
    glad_glCallList(list);
}
PFNGLCALLLISTPROC glad_glCallList = glad_on_demand_impl_glCallList;
static void GLAD_API_PTR glad_on_demand_impl_glCallLists(GLsizei n, GLenum type, const void * lists) {
    glad_glCallLists = (PFNGLCALLLISTSPROC) glad_gl_on_demand_loader("glCallLists");
    glad_glCallLists(n, type, lists);
}
PFNGLCALLLISTSPROC glad_glCallLists = glad_on_demand_impl_glCallLists;
static void GLAD_API_PTR glad_on_demand_impl_glClear(GLbitfield mask) {
    glad_glClear = (PFNGLCLEARPROC) glad_gl_on_demand_loader("glClear");
    glad_glClear(mask);
}
PFNGLCLEARPROC glad_glClear = glad_on_demand_impl_glClear;
static void GLAD_API_PTR glad_on_demand_impl_glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glClearAccum = (PFNGLCLEARACCUMPROC) glad_gl_on_demand_loader("glClearAccum");
    glad_glClearAccum(red, green, blue, alpha);
}
PFNGLCLEARACCUMPROC glad_glClearAccum = glad_on_demand_impl_glClearAccum;
static void GLAD_API_PTR glad_on_demand_impl_glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glClearColor = (PFNGLCLEARCOLORPROC) glad_gl_on_demand_loader("glClearColor");
    glad_glClearColor(red, green, blue, alpha);
}
PFNGLCLEARCOLORPROC glad_glClearColor = glad_on_demand_impl_glClearColor;
static void GLAD_API_PTR glad_on_demand_impl_glClearDepth(GLdouble depth) {
    glad_glClearDepth = (PFNGLCLEARDEPTHPROC) glad_gl_on_demand_loader("glClearDepth");
    glad_glClearDepth(depth);
}
PFNGLCLEARDEPTHPROC glad_glClearDepth = glad_on_demand_impl_glClearDepth;
static void GLAD_API_PTR glad_on_demand_impl_glClearIndex(GLfloat c) {
    glad_glClearIndex = (PFNGLCLEARINDEXPROC) glad_gl_on_demand_loader("glClearIndex");
    glad_glClearIndex(c);
}
PFNGLCLEARINDEXPROC glad_glClearIndex = glad_on_demand_impl_glClearIndex;
static void GLAD_API_PTR glad_on_demand_impl_glClearStencil(GLint s) {
    glad_glClearStencil = (PFNGLCLEARSTENCILPROC) glad_gl_on_demand_loader("glClearStencil");
    glad_glClearStencil(s);
}
PFNGLCLEARSTENCILPROC glad_glClearStencil = glad_on_demand_impl_glClearStencil;
static void GLAD_API_PTR glad_on_demand_impl_glClipPlane(GLenum plane, const GLdouble * equation) {
    glad_glClipPlane = (PFNGLCLIPPLANEPROC) glad_gl_on_demand_loader("glClipPlane");
    glad_glClipPlane(plane, equation);
}
PFNGLCLIPPLANEPROC glad_glClipPlane = glad_on_demand_impl_glClipPlane;
static void GLAD_API_PTR glad_on_demand_impl_glColor3b(GLbyte red, GLbyte green, GLbyte blue) {
    glad_glColor3b = (PFNGLCOLOR3BPROC) glad_gl_on_demand_loader("glColor3b");
    glad_glColor3b(red, green, blue);
}
PFNGLCOLOR3BPROC glad_glColor3b = glad_on_demand_impl_glColor3b;
static void GLAD_API_PTR glad_on_demand_impl_glColor3bv(const GLbyte * v) {
    glad_glColor3bv = (PFNGLCOLOR3BVPROC) glad_gl_on_demand_loader("glColor3bv");
    glad_glColor3bv(v);
}
PFNGLCOLOR3BVPROC glad_glColor3bv = glad_on_demand_impl_glColor3bv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3d(GLdouble red, GLdouble green, GLdouble blue) {
    glad_glColor3d = (PFNGLCOLOR3DPROC) glad_gl_on_demand_loader("glColor3d");
    glad_glColor3d(red, green, blue);
}
PFNGLCOLOR3DPROC glad_glColor3d = glad_on_demand_impl_glColor3d;
static void GLAD_API_PTR glad_on_demand_impl_glColor3dv(const GLdouble * v) {
    glad_glColor3dv = (PFNGLCOLOR3DVPROC) glad_gl_on_demand_loader("glColor3dv");
    glad_glColor3dv(v);
}
PFNGLCOLOR3DVPROC glad_glColor3dv = glad_on_demand_impl_glColor3dv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3f(GLfloat red, GLfloat green, GLfloat blue) {
    glad_glColor3f = (PFNGLCOLOR3FPROC) glad_gl_on_demand_loader("glColor3f");
    glad_glColor3f(red, green, blue);
}
PFNGLCOLOR3FPROC glad_glColor3f = glad_on_demand_impl_glColor3f;
static void GLAD_API_PTR glad_on_demand_impl_glColor3fv(const GLfloat * v) {
    glad_glColor3fv = (PFNGLCOLOR3FVPROC) glad_gl_on_demand_loader("glColor3fv");
    glad_glColor3fv(v);
}
PFNGLCOLOR3FVPROC glad_glColor3fv = glad_on_demand_impl_glColor3fv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3i(GLint red, GLint green, GLint blue) {
    glad_glColor3i = (PFNGLCOLOR3IPROC) glad_gl_on_demand_loader("glColor3i");
    glad_glColor3i(red, green, blue);
}
PFNGLCOLOR3IPROC glad_glColor3i = glad_on_demand_impl_glColor3i;
static void GLAD_API_PTR glad_on_demand_impl_glColor3iv(const GLint * v) {
    glad_glColor3iv = (PFNGLCOLOR3IVPROC) glad_gl_on_demand_loader("glColor3iv");
    glad_glColor3iv(v);
}
PFNGLCOLOR3IVPROC glad_glColor3iv = glad_on_demand_impl_glColor3iv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3s(GLshort red, GLshort green, GLshort blue) {
    glad_glColor3s = (PFNGLCOLOR3SPROC) glad_gl_on_demand_loader("glColor3s");
    glad_glColor3s(red, green, blue);
}
PFNGLCOLOR3SPROC glad_glColor3s = glad_on_demand_impl_glColor3s;
static void GLAD_API_PTR glad_on_demand_impl_glColor3sv(const GLshort * v) {
    glad_glColor3sv = (PFNGLCOLOR3SVPROC) glad_gl_on_demand_loader("glColor3sv");
    glad_glColor3sv(v);
}
PFNGLCOLOR3SVPROC glad_glColor3sv = glad_on_demand_impl_glColor3sv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3ub(GLubyte red, GLubyte green, GLubyte blue) {
    glad_glColor3ub = (PFNGLCOLOR3UBPROC) glad_gl_on_demand_loader("glColor3ub");
    glad_glColor3ub(red, green, blue);
}
PFNGLCOLOR3UBPROC glad_glColor3ub = glad_on_demand_impl_glColor3ub;
static void GLAD_API_PTR glad_on_demand_impl_glColor3ubv(const GLubyte * v) {
    glad_glColor3ubv = (PFNGLCOLOR3UBVPROC) glad_gl_on_demand_loader("glColor3ubv");
    glad_glColor3ubv(v);
}
PFNGLCOLOR3UBVPROC glad_glColor3ubv = glad_on_demand_impl_glColor3ubv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3ui(GLuint red, GLuint green, GLuint blue) {
    glad_glColor3ui = (PFNGLCOLOR3UIPROC) glad_gl_on_demand_loader("glColor3ui");
    glad_glColor3ui(red, green, blue);
}
PFNGLCOLOR3UIPROC glad_glColor3ui = glad_on_demand_impl_glColor3ui;
static void GLAD_API_PTR glad_on_demand_impl_glColor3uiv(const GLuint * v) {
    glad_glColor3uiv = (PFNGLCOLOR3UIVPROC) glad_gl_on_demand_loader("glColor3uiv");
    glad_glColor3uiv(v);
}
PFNGLCOLOR3UIVPROC glad_glColor3uiv = glad_on_demand_impl_glColor3uiv;
static void GLAD_API_PTR glad_on_demand_impl_glColor3us(GLushort red, GLushort green, GLushort blue) {
    glad_glColor3us = (PFNGLCOLOR3USPROC) glad_gl_on_demand_loader("glColor3us");
    glad_glColor3us(red, green, blue);
}
PFNGLCOLOR3USPROC glad_glColor3us = glad_on_demand_impl_glColor3us;
static void GLAD_API_PTR glad_on_demand_impl_glColor3usv(const GLushort * v) {
    glad_glColor3usv = (PFNGLCOLOR3USVPROC) glad_gl_on_demand_loader("glColor3usv");
    glad_glColor3usv(v);
}
PFNGLCOLOR3USVPROC glad_glColor3usv = glad_on_demand_impl_glColor3usv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
    glad_glColor4b = (PFNGLCOLOR4BPROC) glad_gl_on_demand_loader("glColor4b");
    glad_glColor4b(red, green, blue, alpha);
}
PFNGLCOLOR4BPROC glad_glColor4b = glad_on_demand_impl_glColor4b;
static void GLAD_API_PTR glad_on_demand_impl_glColor4bv(const GLbyte * v) {
    glad_glColor4bv = (PFNGLCOLOR4BVPROC) glad_gl_on_demand_loader("glColor4bv");
    glad_glColor4bv(v);
}
PFNGLCOLOR4BVPROC glad_glColor4bv = glad_on_demand_impl_glColor4bv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
    glad_glColor4d = (PFNGLCOLOR4DPROC) glad_gl_on_demand_loader("glColor4d");
    glad_glColor4d(red, green, blue, alpha);
}
PFNGLCOLOR4DPROC glad_glColor4d = glad_on_demand_impl_glColor4d;
static void GLAD_API_PTR glad_on_demand_impl_glColor4dv(const GLdouble * v) {
    glad_glColor4dv = (PFNGLCOLOR4DVPROC) glad_gl_on_demand_loader("glColor4dv");
    glad_glColor4dv(v);
}
PFNGLCOLOR4DVPROC glad_glColor4dv = glad_on_demand_impl_glColor4dv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
    glad_glColor4f = (PFNGLCOLOR4FPROC) glad_gl_on_demand_loader("glColor4f");
    glad_glColor4f(red, green, blue, alpha);
}
PFNGLCOLOR4FPROC glad_glColor4f = glad_on_demand_impl_glColor4f;
static void GLAD_API_PTR glad_on_demand_impl_glColor4fv(const GLfloat * v) {
    glad_glColor4fv = (PFNGLCOLOR4FVPROC) glad_gl_on_demand_loader("glColor4fv");
    glad_glColor4fv(v);
}
PFNGLCOLOR4FVPROC glad_glColor4fv = glad_on_demand_impl_glColor4fv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4i(GLint red, GLint green, GLint blue, GLint alpha) {
    glad_glColor4i = (PFNGLCOLOR4IPROC) glad_gl_on_demand_loader("glColor4i");
    glad_glColor4i(red, green, blue, alpha);
}
PFNGLCOLOR4IPROC glad_glColor4i = glad_on_demand_impl_glColor4i;
static void GLAD_API_PTR glad_on_demand_impl_glColor4iv(const GLint * v) {
    glad_glColor4iv = (PFNGLCOLOR4IVPROC) glad_gl_on_demand_loader("glColor4iv");
    glad_glColor4iv(v);
}
PFNGLCOLOR4IVPROC glad_glColor4iv = glad_on_demand_impl_glColor4iv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) {
    glad_glColor4s = (PFNGLCOLOR4SPROC) glad_gl_on_demand_loader("glColor4s");
    glad_glColor4s(red, green, blue, alpha);
}
PFNGLCOLOR4SPROC glad_glColor4s = glad_on_demand_impl_glColor4s;
static void GLAD_API_PTR glad_on_demand_impl_glColor4sv(const GLshort * v) {
    glad_glColor4sv = (PFNGLCOLOR4SVPROC) glad_gl_on_demand_loader("glColor4sv");
    glad_glColor4sv(v);
}
PFNGLCOLOR4SVPROC glad_glColor4sv = glad_on_demand_impl_glColor4sv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
    glad_glColor4ub = (PFNGLCOLOR4UBPROC) glad_gl_on_demand_loader("glColor4ub");
    glad_glColor4ub(red, green, blue, alpha);
}
PFNGLCOLOR4UBPROC glad_glColor4ub = glad_on_demand_impl_glColor4ub;
static void GLAD_API_PTR glad_on_demand_impl_glColor4ubv(const GLubyte * v) {
    glad_glColor4ubv = (PFNGLCOLOR4UBVPROC) glad_gl_on_demand_loader("glColor4ubv");
    glad_glColor4ubv(v);
}
PFNGLCOLOR4UBVPROC glad_glColor4ubv = glad_on_demand_impl_glColor4ubv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) {
    glad_glColor4ui = (PFNGLCOLOR4UIPROC) glad_gl_on_demand_loader("glColor4ui");
    glad_glColor4ui(red, green, blue, alpha);
}
PFNGLCOLOR4UIPROC glad_glColor4ui = glad_on_demand_impl_glColor4ui;
static void GLAD_API_PTR glad_on_demand_impl_glColor4uiv(const GLuint * v) {
    glad_glColor4uiv = (PFNGLCOLOR4UIVPROC) glad_gl_on_demand_loader("glColor4uiv");
    glad_glColor4uiv(v);
}
PFNGLCOLOR4UIVPROC glad_glColor4uiv = glad_on_demand_impl_glColor4uiv;
static void GLAD_API_PTR glad_on_demand_impl_glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) {
    glad_glColor4us = (PFNGLCOLOR4USPROC) glad_gl_on_demand_loader("glColor4us");
    glad_glColor4us(red, green, blue, alpha);
}
PFNGLCOLOR4USPROC glad_glColor4us = glad_on_demand_impl_glColor4us;
static void GLAD_API_PTR glad_on_demand_impl_glColor4usv(const GLushort * v) {
    glad_glColor4usv = (PFNGLCOLOR4USVPROC) glad_gl_on_demand_loader("glColor4usv");
    glad_glColor4usv(v);
}
PFNGLCOLOR4USVPROC glad_glColor4usv = glad_on_demand_impl_glColor4usv;
static void GLAD_API_PTR glad_on_demand_impl_glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
    glad_glColorMask = (PFNGLCOLORMASKPROC) glad_gl_on_demand_loader("glColorMask");
    glad_glColorMask(red, green, blue, alpha);
}
PFNGLCOLORMASKPROC glad_glColorMask = glad_on_demand_impl_glColorMask;
static void GLAD_API_PTR glad_on_demand_impl_glColorMaterial(GLenum face, GLenum mode) {
    glad_glColorMaterial = (PFNGLCOLORMATERIALPROC) glad_gl_on_demand_loader("glColorMaterial");
    glad_glColorMaterial(face, mode);
}
PFNGLCOLORMATERIALPROC glad_glColorMaterial = glad_on_demand_impl_glColorMaterial;
static void GLAD_API_PTR glad_on_demand_impl_glColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glColorPointer = (PFNGLCOLORPOINTERPROC) glad_gl_on_demand_loader("glColorPointer");
    glad_glColorPointer(size, type, stride, pointer);
}
PFNGLCOLORPOINTERPROC glad_glColorPointer = glad_on_demand_impl_glColorPointer;
static void GLAD_API_PTR glad_on_demand_impl_glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {
    glad_glCopyPixels = (PFNGLCOPYPIXELSPROC) glad_gl_on_demand_loader("glCopyPixels");
    glad_glCopyPixels(x, y, width, height, type);
}
PFNGLCOPYPIXELSPROC glad_glCopyPixels = glad_on_demand_impl_glCopyPixels;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
    glad_glCopyTexImage1D = (PFNGLCOPYTEXIMAGE1DPROC) glad_gl_on_demand_loader("glCopyTexImage1D");
    glad_glCopyTexImage1D(target, level, internalformat, x, y, width, border);
}
PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D = glad_on_demand_impl_glCopyTexImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
    glad_glCopyTexImage2D = (PFNGLCOPYTEXIMAGE2DPROC) glad_gl_on_demand_loader("glCopyTexImage2D");
    glad_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
}
PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D = glad_on_demand_impl_glCopyTexImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
    glad_glCopyTexSubImage1D = (PFNGLCOPYTEXSUBIMAGE1DPROC) glad_gl_on_demand_loader("glCopyTexSubImage1D");
    glad_glCopyTexSubImage1D(target, level, xoffset, x, y, width);
}
PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D = glad_on_demand_impl_glCopyTexSubImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glCopyTexSubImage2D = (PFNGLCOPYTEXSUBIMAGE2DPROC) glad_gl_on_demand_loader("glCopyTexSubImage2D");
    glad_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
}
PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D = glad_on_demand_impl_glCopyTexSubImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glCullFace(GLenum mode) {
    glad_glCullFace = (PFNGLCULLFACEPROC) glad_gl_on_demand_loader("glCullFace");
    glad_glCullFace(mode);
}
PFNGLCULLFACEPROC glad_glCullFace = glad_on_demand_impl_glCullFace;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteLists(GLuint list, GLsizei range) {
    glad_glDeleteLists = (PFNGLDELETELISTSPROC) glad_gl_on_demand_loader("glDeleteLists");
    glad_glDeleteLists(list, range);
}
PFNGLDELETELISTSPROC glad_glDeleteLists = glad_on_demand_impl_glDeleteLists;
static void GLAD_API_PTR glad_on_demand_impl_glDeleteTextures(GLsizei n, const GLuint * textures) {
    glad_glDeleteTextures = (PFNGLDELETETEXTURESPROC) glad_gl_on_demand_loader("glDeleteTextures");
    glad_glDeleteTextures(n, textures);
}
PFNGLDELETETEXTURESPROC glad_glDeleteTextures = glad_on_demand_impl_glDeleteTextures;
static void GLAD_API_PTR glad_on_demand_impl_glDepthFunc(GLenum func) {
    glad_glDepthFunc = (PFNGLDEPTHFUNCPROC) glad_gl_on_demand_loader("glDepthFunc");
    glad_glDepthFunc(func);
}
PFNGLDEPTHFUNCPROC glad_glDepthFunc = glad_on_demand_impl_glDepthFunc;
static void GLAD_API_PTR glad_on_demand_impl_glDepthMask(GLboolean flag) {
    glad_glDepthMask = (PFNGLDEPTHMASKPROC) glad_gl_on_demand_loader("glDepthMask");
    glad_glDepthMask(flag);
}
PFNGLDEPTHMASKPROC glad_glDepthMask = glad_on_demand_impl_glDepthMask;
static void GLAD_API_PTR glad_on_demand_impl_glDepthRange(GLdouble n, GLdouble f) {
    glad_glDepthRange = (PFNGLDEPTHRANGEPROC) glad_gl_on_demand_loader("glDepthRange");
    glad_glDepthRange(n, f);
}
PFNGLDEPTHRANGEPROC glad_glDepthRange = glad_on_demand_impl_glDepthRange;
static void GLAD_API_PTR glad_on_demand_impl_glDisable(GLenum cap) {
    glad_glDisable = (PFNGLDISABLEPROC) glad_gl_on_demand_loader("glDisable");
    glad_glDisable(cap);
}
PFNGLDISABLEPROC glad_glDisable = glad_on_demand_impl_glDisable;
static void GLAD_API_PTR glad_on_demand_impl_glDisableClientState(GLenum array) {
    glad_glDisableClientState = (PFNGLDISABLECLIENTSTATEPROC) glad_gl_on_demand_loader("glDisableClientState");
    glad_glDisableClientState(array);
}
PFNGLDISABLECLIENTSTATEPROC glad_glDisableClientState = glad_on_demand_impl_glDisableClientState;
static void GLAD_API_PTR glad_on_demand_impl_glDrawArrays(GLenum mode, GLint first, GLsizei count) {
    glad_glDrawArrays = (PFNGLDRAWARRAYSPROC) glad_gl_on_demand_loader("glDrawArrays");
    glad_glDrawArrays(mode, first, count);
}
PFNGLDRAWARRAYSPROC glad_glDrawArrays = glad_on_demand_impl_glDrawArrays;
static void GLAD_API_PTR glad_on_demand_impl_glDrawBuffer(GLenum buf) {
    glad_glDrawBuffer = (PFNGLDRAWBUFFERPROC) glad_gl_on_demand_loader("glDrawBuffer");
    glad_glDrawBuffer(buf);
}
PFNGLDRAWBUFFERPROC glad_glDrawBuffer = glad_on_demand_impl_glDrawBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices) {
    glad_glDrawElements = (PFNGLDRAWELEMENTSPROC) glad_gl_on_demand_loader("glDrawElements");
    glad_glDrawElements(mode, count, type, indices);
}
PFNGLDRAWELEMENTSPROC glad_glDrawElements = glad_on_demand_impl_glDrawElements;
static void GLAD_API_PTR glad_on_demand_impl_glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
    glad_glDrawPixels = (PFNGLDRAWPIXELSPROC) glad_gl_on_demand_loader("glDrawPixels");
    glad_glDrawPixels(width, height, format, type, pixels);
}
PFNGLDRAWPIXELSPROC glad_glDrawPixels = glad_on_demand_impl_glDrawPixels;
static void GLAD_API_PTR glad_on_demand_impl_glEdgeFlag(GLboolean flag) {
    glad_glEdgeFlag = (PFNGLEDGEFLAGPROC) glad_gl_on_demand_loader("glEdgeFlag");
    glad_glEdgeFlag(flag);
}
PFNGLEDGEFLAGPROC glad_glEdgeFlag = glad_on_demand_impl_glEdgeFlag;
static void GLAD_API_PTR glad_on_demand_impl_glEdgeFlagPointer(GLsizei stride, const void * pointer) {
    glad_glEdgeFlagPointer = (PFNGLEDGEFLAGPOINTERPROC) glad_gl_on_demand_loader("glEdgeFlagPointer");
    glad_glEdgeFlagPointer(stride, pointer);
}
PFNGLEDGEFLAGPOINTERPROC glad_glEdgeFlagPointer = glad_on_demand_impl_glEdgeFlagPointer;
static void GLAD_API_PTR glad_on_demand_impl_glEdgeFlagv(const GLboolean * flag) {
    glad_glEdgeFlagv = (PFNGLEDGEFLAGVPROC) glad_gl_on_demand_loader("glEdgeFlagv");
    glad_glEdgeFlagv(flag);
}
PFNGLEDGEFLAGVPROC glad_glEdgeFlagv = glad_on_demand_impl_glEdgeFlagv;
static void GLAD_API_PTR glad_on_demand_impl_glEnable(GLenum cap) {
    glad_glEnable = (PFNGLENABLEPROC) glad_gl_on_demand_loader("glEnable");
    glad_glEnable(cap);
}
PFNGLENABLEPROC glad_glEnable = glad_on_demand_impl_glEnable;
static void GLAD_API_PTR glad_on_demand_impl_glEnableClientState(GLenum array) {
    glad_glEnableClientState = (PFNGLENABLECLIENTSTATEPROC) glad_gl_on_demand_loader("glEnableClientState");
    glad_glEnableClientState(array);
}
PFNGLENABLECLIENTSTATEPROC glad_glEnableClientState = glad_on_demand_impl_glEnableClientState;
static void GLAD_API_PTR glad_on_demand_impl_glEnd(void) {
    glad_glEnd = (PFNGLENDPROC) glad_gl_on_demand_loader("glEnd");
    glad_glEnd();
}
PFNGLENDPROC glad_glEnd = glad_on_demand_impl_glEnd;
static void GLAD_API_PTR glad_on_demand_impl_glEndList(void) {
    glad_glEndList = (PFNGLENDLISTPROC) glad_gl_on_demand_loader("glEndList");
    glad_glEndList();
}
PFNGLENDLISTPROC glad_glEndList = glad_on_demand_impl_glEndList;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord1d(GLdouble u) {
    glad_glEvalCoord1d = (PFNGLEVALCOORD1DPROC) glad_gl_on_demand_loader("glEvalCoord1d");
    glad_glEvalCoord1d(u);
}
PFNGLEVALCOORD1DPROC glad_glEvalCoord1d = glad_on_demand_impl_glEvalCoord1d;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord1dv(const GLdouble * u) {
    glad_glEvalCoord1dv = (PFNGLEVALCOORD1DVPROC) glad_gl_on_demand_loader("glEvalCoord1dv");
    glad_glEvalCoord1dv(u);
}
PFNGLEVALCOORD1DVPROC glad_glEvalCoord1dv = glad_on_demand_impl_glEvalCoord1dv;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord1f(GLfloat u) {
    glad_glEvalCoord1f = (PFNGLEVALCOORD1FPROC) glad_gl_on_demand_loader("glEvalCoord1f");
    glad_glEvalCoord1f(u);
}
PFNGLEVALCOORD1FPROC glad_glEvalCoord1f = glad_on_demand_impl_glEvalCoord1f;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord1fv(const GLfloat * u) {
    glad_glEvalCoord1fv = (PFNGLEVALCOORD1FVPROC) glad_gl_on_demand_loader("glEvalCoord1fv");
    glad_glEvalCoord1fv(u);
}
PFNGLEVALCOORD1FVPROC glad_glEvalCoord1fv = glad_on_demand_impl_glEvalCoord1fv;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord2d(GLdouble u, GLdouble v) {
    glad_glEvalCoord2d = (PFNGLEVALCOORD2DPROC) glad_gl_on_demand_loader("glEvalCoord2d");
    glad_glEvalCoord2d(u, v);
}
PFNGLEVALCOORD2DPROC glad_glEvalCoord2d = glad_on_demand_impl_glEvalCoord2d;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord2dv(const GLdouble * u) {
    glad_glEvalCoord2dv = (PFNGLEVALCOORD2DVPROC) glad_gl_on_demand_loader("glEvalCoord2dv");
    glad_glEvalCoord2dv(u);
}
PFNGLEVALCOORD2DVPROC glad_glEvalCoord2dv = glad_on_demand_impl_glEvalCoord2dv;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord2f(GLfloat u, GLfloat v) {
    glad_glEvalCoord2f = (PFNGLEVALCOORD2FPROC) glad_gl_on_demand_loader("glEvalCoord2f");
    glad_glEvalCoord2f(u, v);
}
PFNGLEVALCOORD2FPROC glad_glEvalCoord2f = glad_on_demand_impl_glEvalCoord2f;
static void GLAD_API_PTR glad_on_demand_impl_glEvalCoord2fv(const GLfloat * u) {
    glad_glEvalCoord2fv = (PFNGLEVALCOORD2FVPROC) glad_gl_on_demand_loader("glEvalCoord2fv");
    glad_glEvalCoord2fv(u);
}
PFNGLEVALCOORD2FVPROC glad_glEvalCoord2fv = glad_on_demand_impl_glEvalCoord2fv;
static void GLAD_API_PTR glad_on_demand_impl_glEvalMesh1(GLenum mode, GLint i1, GLint i2) {
    glad_glEvalMesh1 = (PFNGLEVALMESH1PROC) glad_gl_on_demand_loader("glEvalMesh1");
    glad_glEvalMesh1(mode, i1, i2);
}
PFNGLEVALMESH1PROC glad_glEvalMesh1 = glad_on_demand_impl_glEvalMesh1;
static void GLAD_API_PTR glad_on_demand_impl_glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
    glad_glEvalMesh2 = (PFNGLEVALMESH2PROC) glad_gl_on_demand_loader("glEvalMesh2");
    glad_glEvalMesh2(mode, i1, i2, j1, j2);
}
PFNGLEVALMESH2PROC glad_glEvalMesh2 = glad_on_demand_impl_glEvalMesh2;
static void GLAD_API_PTR glad_on_demand_impl_glEvalPoint1(GLint i) {
    glad_glEvalPoint1 = (PFNGLEVALPOINT1PROC) glad_gl_on_demand_loader("glEvalPoint1");
    glad_glEvalPoint1(i);
}
PFNGLEVALPOINT1PROC glad_glEvalPoint1 = glad_on_demand_impl_glEvalPoint1;
static void GLAD_API_PTR glad_on_demand_impl_glEvalPoint2(GLint i, GLint j) {
    glad_glEvalPoint2 = (PFNGLEVALPOINT2PROC) glad_gl_on_demand_loader("glEvalPoint2");
    glad_glEvalPoint2(i, j);
}
PFNGLEVALPOINT2PROC glad_glEvalPoint2 = glad_on_demand_impl_glEvalPoint2;
static void GLAD_API_PTR glad_on_demand_impl_glFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer) {
    glad_glFeedbackBuffer = (PFNGLFEEDBACKBUFFERPROC) glad_gl_on_demand_loader("glFeedbackBuffer");
    glad_glFeedbackBuffer(size, type, buffer);
}
PFNGLFEEDBACKBUFFERPROC glad_glFeedbackBuffer = glad_on_demand_impl_glFeedbackBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glFinish(void) {
    glad_glFinish = (PFNGLFINISHPROC) glad_gl_on_demand_loader("glFinish");
    glad_glFinish();
}
PFNGLFINISHPROC glad_glFinish = glad_on_demand_impl_glFinish;
static void GLAD_API_PTR glad_on_demand_impl_glFlush(void) {
    glad_glFlush = (PFNGLFLUSHPROC) glad_gl_on_demand_loader("glFlush");
    glad_glFlush();
}
PFNGLFLUSHPROC glad_glFlush = glad_on_demand_impl_glFlush;
static void GLAD_API_PTR glad_on_demand_impl_glFogf(GLenum pname, GLfloat param) {
    glad_glFogf = (PFNGLFOGFPROC) glad_gl_on_demand_loader("glFogf");
    glad_glFogf(pname, param);
}
PFNGLFOGFPROC glad_glFogf = glad_on_demand_impl_glFogf;
static void GLAD_API_PTR glad_on_demand_impl_glFogfv(GLenum pname, const GLfloat * params) {
    glad_glFogfv = (PFNGLFOGFVPROC) glad_gl_on_demand_loader("glFogfv");
    glad_glFogfv(pname, params);
}
PFNGLFOGFVPROC glad_glFogfv = glad_on_demand_impl_glFogfv;
static void GLAD_API_PTR glad_on_demand_impl_glFogi(GLenum pname, GLint param) {
    glad_glFogi = (PFNGLFOGIPROC) glad_gl_on_demand_loader("glFogi");
    glad_glFogi(pname, param);
}
PFNGLFOGIPROC glad_glFogi = glad_on_demand_impl_glFogi;
static void GLAD_API_PTR glad_on_demand_impl_glFogiv(GLenum pname, const GLint * params) {
    glad_glFogiv = (PFNGLFOGIVPROC) glad_gl_on_demand_loader("glFogiv");
    glad_glFogiv(pname, params);
}
PFNGLFOGIVPROC glad_glFogiv = glad_on_demand_impl_glFogiv;
static void GLAD_API_PTR glad_on_demand_impl_glFrontFace(GLenum mode) {
    glad_glFrontFace = (PFNGLFRONTFACEPROC) glad_gl_on_demand_loader("glFrontFace");
    glad_glFrontFace(mode);
}
PFNGLFRONTFACEPROC glad_glFrontFace = glad_on_demand_impl_glFrontFace;
static void GLAD_API_PTR glad_on_demand_impl_glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    glad_glFrustum = (PFNGLFRUSTUMPROC) glad_gl_on_demand_loader("glFrustum");
    glad_glFrustum(left, right, bottom, top, zNear, zFar);
}
PFNGLFRUSTUMPROC glad_glFrustum = glad_on_demand_impl_glFrustum;
static GLuint GLAD_API_PTR glad_on_demand_impl_glGenLists(GLsizei range) {
    glad_glGenLists = (PFNGLGENLISTSPROC) glad_gl_on_demand_loader("glGenLists");
    return glad_glGenLists(range);
}
PFNGLGENLISTSPROC glad_glGenLists = glad_on_demand_impl_glGenLists;
static void GLAD_API_PTR glad_on_demand_impl_glGenTextures(GLsizei n, GLuint * textures) {
    glad_glGenTextures = (PFNGLGENTEXTURESPROC) glad_gl_on_demand_loader("glGenTextures");
    glad_glGenTextures(n, textures);
}
PFNGLGENTEXTURESPROC glad_glGenTextures = glad_on_demand_impl_glGenTextures;
static void GLAD_API_PTR glad_on_demand_impl_glGetBooleanv(GLenum pname, GLboolean * data) {
    glad_glGetBooleanv = (PFNGLGETBOOLEANVPROC) glad_gl_on_demand_loader("glGetBooleanv");
    glad_glGetBooleanv(pname, data);
}
PFNGLGETBOOLEANVPROC glad_glGetBooleanv = glad_on_demand_impl_glGetBooleanv;
static void GLAD_API_PTR glad_on_demand_impl_glGetClipPlane(GLenum plane, GLdouble * equation) {
    glad_glGetClipPlane = (PFNGLGETCLIPPLANEPROC) glad_gl_on_demand_loader("glGetClipPlane");
    glad_glGetClipPlane(plane, equation);
}
PFNGLGETCLIPPLANEPROC glad_glGetClipPlane = glad_on_demand_impl_glGetClipPlane;
static void GLAD_API_PTR glad_on_demand_impl_glGetDoublev(GLenum pname, GLdouble * data) {
    glad_glGetDoublev = (PFNGLGETDOUBLEVPROC) glad_gl_on_demand_loader("glGetDoublev");
    glad_glGetDoublev(pname, data);
}
PFNGLGETDOUBLEVPROC glad_glGetDoublev = glad_on_demand_impl_glGetDoublev;
static GLenum GLAD_API_PTR glad_on_demand_impl_glGetError(void) {
    glad_glGetError = (PFNGLGETERRORPROC) glad_gl_on_demand_loader("glGetError");
    return glad_glGetError();
}
PFNGLGETERRORPROC glad_glGetError = glad_on_demand_impl_glGetError;
static void GLAD_API_PTR glad_on_demand_impl_glGetFloatv(GLenum pname, GLfloat * data) {
    glad_glGetFloatv = (PFNGLGETFLOATVPROC) glad_gl_on_demand_loader("glGetFloatv");
    glad_glGetFloatv(pname, data);
}
PFNGLGETFLOATVPROC glad_glGetFloatv = glad_on_demand_impl_glGetFloatv;
static void GLAD_API_PTR glad_on_demand_impl_glGetIntegerv(GLenum pname, GLint * data) {
    glad_glGetIntegerv = (PFNGLGETINTEGERVPROC) glad_gl_on_demand_loader("glGetIntegerv");
    glad_glGetIntegerv(pname, data);
}
PFNGLGETINTEGERVPROC glad_glGetIntegerv = glad_on_demand_impl_glGetIntegerv;
static void GLAD_API_PTR glad_on_demand_impl_glGetLightfv(GLenum light, GLenum pname, GLfloat * params) {
    glad_glGetLightfv = (PFNGLGETLIGHTFVPROC) glad_gl_on_demand_loader("glGetLightfv");
    glad_glGetLightfv(light, pname, params);
}
PFNGLGETLIGHTFVPROC glad_glGetLightfv = glad_on_demand_impl_glGetLightfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetLightiv(GLenum light, GLenum pname, GLint * params) {
    glad_glGetLightiv = (PFNGLGETLIGHTIVPROC) glad_gl_on_demand_loader("glGetLightiv");
    glad_glGetLightiv(light, pname, params);
}
PFNGLGETLIGHTIVPROC glad_glGetLightiv = glad_on_demand_impl_glGetLightiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMapdv(GLenum target, GLenum query, GLdouble * v) {
    glad_glGetMapdv = (PFNGLGETMAPDVPROC) glad_gl_on_demand_loader("glGetMapdv");
    glad_glGetMapdv(target, query, v);
}
PFNGLGETMAPDVPROC glad_glGetMapdv = glad_on_demand_impl_glGetMapdv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMapfv(GLenum target, GLenum query, GLfloat * v) {
    glad_glGetMapfv = (PFNGLGETMAPFVPROC) glad_gl_on_demand_loader("glGetMapfv");
    glad_glGetMapfv(target, query, v);
}
PFNGLGETMAPFVPROC glad_glGetMapfv = glad_on_demand_impl_glGetMapfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMapiv(GLenum target, GLenum query, GLint * v) {
    glad_glGetMapiv = (PFNGLGETMAPIVPROC) glad_gl_on_demand_loader("glGetMapiv");
    glad_glGetMapiv(target, query, v);
}
PFNGLGETMAPIVPROC glad_glGetMapiv = glad_on_demand_impl_glGetMapiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMaterialfv(GLenum face, GLenum pname, GLfloat * params) {
    glad_glGetMaterialfv = (PFNGLGETMATERIALFVPROC) glad_gl_on_demand_loader("glGetMaterialfv");
    glad_glGetMaterialfv(face, pname, params);
}
PFNGLGETMATERIALFVPROC glad_glGetMaterialfv = glad_on_demand_impl_glGetMaterialfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetMaterialiv(GLenum face, GLenum pname, GLint * params) {
    glad_glGetMaterialiv = (PFNGLGETMATERIALIVPROC) glad_gl_on_demand_loader("glGetMaterialiv");
    glad_glGetMaterialiv(face, pname, params);
}
PFNGLGETMATERIALIVPROC glad_glGetMaterialiv = glad_on_demand_impl_glGetMaterialiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetPixelMapfv(GLenum map, GLfloat * values) {
    glad_glGetPixelMapfv = (PFNGLGETPIXELMAPFVPROC) glad_gl_on_demand_loader("glGetPixelMapfv");
    glad_glGetPixelMapfv(map, values);
}
PFNGLGETPIXELMAPFVPROC glad_glGetPixelMapfv = glad_on_demand_impl_glGetPixelMapfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetPixelMapuiv(GLenum map, GLuint * values) {
    glad_glGetPixelMapuiv = (PFNGLGETPIXELMAPUIVPROC) glad_gl_on_demand_loader("glGetPixelMapuiv");
    glad_glGetPixelMapuiv(map, values);
}
PFNGLGETPIXELMAPUIVPROC glad_glGetPixelMapuiv = glad_on_demand_impl_glGetPixelMapuiv;
static void GLAD_API_PTR glad_on_demand_impl_glGetPixelMapusv(GLenum map, GLushort * values) {
    glad_glGetPixelMapusv = (PFNGLGETPIXELMAPUSVPROC) glad_gl_on_demand_loader("glGetPixelMapusv");
    glad_glGetPixelMapusv(map, values);
}
PFNGLGETPIXELMAPUSVPROC glad_glGetPixelMapusv = glad_on_demand_impl_glGetPixelMapusv;
static void GLAD_API_PTR glad_on_demand_impl_glGetPointerv(GLenum pname, void ** params) {
    glad_glGetPointerv = (PFNGLGETPOINTERVPROC) glad_gl_on_demand_loader("glGetPointerv");
    glad_glGetPointerv(pname, params);
}
PFNGLGETPOINTERVPROC glad_glGetPointerv = glad_on_demand_impl_glGetPointerv;
static void GLAD_API_PTR glad_on_demand_impl_glGetPolygonStipple(GLubyte * mask) {
    glad_glGetPolygonStipple = (PFNGLGETPOLYGONSTIPPLEPROC) glad_gl_on_demand_loader("glGetPolygonStipple");
    glad_glGetPolygonStipple(mask);
}
PFNGLGETPOLYGONSTIPPLEPROC glad_glGetPolygonStipple = glad_on_demand_impl_glGetPolygonStipple;
static const GLubyte * GLAD_API_PTR glad_on_demand_impl_glGetString(GLenum name) {
    glad_glGetString = (PFNGLGETSTRINGPROC) glad_gl_on_demand_loader("glGetString");
    return glad_glGetString(name);
}
PFNGLGETSTRINGPROC glad_glGetString = glad_on_demand_impl_glGetString;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params) {
    glad_glGetTexEnvfv = (PFNGLGETTEXENVFVPROC) glad_gl_on_demand_loader("glGetTexEnvfv");
    glad_glGetTexEnvfv(target, pname, params);
}
PFNGLGETTEXENVFVPROC glad_glGetTexEnvfv = glad_on_demand_impl_glGetTexEnvfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexEnviv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetTexEnviv = (PFNGLGETTEXENVIVPROC) glad_gl_on_demand_loader("glGetTexEnviv");
    glad_glGetTexEnviv(target, pname, params);
}
PFNGLGETTEXENVIVPROC glad_glGetTexEnviv = glad_on_demand_impl_glGetTexEnviv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexGendv(GLenum coord, GLenum pname, GLdouble * params) {
    glad_glGetTexGendv = (PFNGLGETTEXGENDVPROC) glad_gl_on_demand_loader("glGetTexGendv");
    glad_glGetTexGendv(coord, pname, params);
}
PFNGLGETTEXGENDVPROC glad_glGetTexGendv = glad_on_demand_impl_glGetTexGendv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params) {
    glad_glGetTexGenfv = (PFNGLGETTEXGENFVPROC) glad_gl_on_demand_loader("glGetTexGenfv");
    glad_glGetTexGenfv(coord, pname, params);
}
PFNGLGETTEXGENFVPROC glad_glGetTexGenfv = glad_on_demand_impl_glGetTexGenfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexGeniv(GLenum coord, GLenum pname, GLint * params) {
    glad_glGetTexGeniv = (PFNGLGETTEXGENIVPROC) glad_gl_on_demand_loader("glGetTexGeniv");
    glad_glGetTexGeniv(coord, pname, params);
}
PFNGLGETTEXGENIVPROC glad_glGetTexGeniv = glad_on_demand_impl_glGetTexGeniv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels) {
    glad_glGetTexImage = (PFNGLGETTEXIMAGEPROC) glad_gl_on_demand_loader("glGetTexImage");
    glad_glGetTexImage(target, level, format, type, pixels);
}
PFNGLGETTEXIMAGEPROC glad_glGetTexImage = glad_on_demand_impl_glGetTexImage;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params) {
    glad_glGetTexLevelParameterfv = (PFNGLGETTEXLEVELPARAMETERFVPROC) glad_gl_on_demand_loader("glGetTexLevelParameterfv");
    glad_glGetTexLevelParameterfv(target, level, pname, params);
}
PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv = glad_on_demand_impl_glGetTexLevelParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params) {
    glad_glGetTexLevelParameteriv = (PFNGLGETTEXLEVELPARAMETERIVPROC) glad_gl_on_demand_loader("glGetTexLevelParameteriv");
    glad_glGetTexLevelParameteriv(target, level, pname, params);
}
PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv = glad_on_demand_impl_glGetTexLevelParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params) {
    glad_glGetTexParameterfv = (PFNGLGETTEXPARAMETERFVPROC) glad_gl_on_demand_loader("glGetTexParameterfv");
    glad_glGetTexParameterfv(target, pname, params);
}
PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv = glad_on_demand_impl_glGetTexParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glGetTexParameteriv(GLenum target, GLenum pname, GLint * params) {
    glad_glGetTexParameteriv = (PFNGLGETTEXPARAMETERIVPROC) glad_gl_on_demand_loader("glGetTexParameteriv");
    glad_glGetTexParameteriv(target, pname, params);
}
PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv = glad_on_demand_impl_glGetTexParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glHint(GLenum target, GLenum mode) {
    glad_glHint = (PFNGLHINTPROC) glad_gl_on_demand_loader("glHint");
    glad_glHint(target, mode);
}
PFNGLHINTPROC glad_glHint = glad_on_demand_impl_glHint;
static void GLAD_API_PTR glad_on_demand_impl_glIndexMask(GLuint mask) {
    glad_glIndexMask = (PFNGLINDEXMASKPROC) glad_gl_on_demand_loader("glIndexMask");
    glad_glIndexMask(mask);
}
PFNGLINDEXMASKPROC glad_glIndexMask = glad_on_demand_impl_glIndexMask;
static void GLAD_API_PTR glad_on_demand_impl_glIndexPointer(GLenum type, GLsizei stride, const void * pointer) {
    glad_glIndexPointer = (PFNGLINDEXPOINTERPROC) glad_gl_on_demand_loader("glIndexPointer");
    glad_glIndexPointer(type, stride, pointer);
}
PFNGLINDEXPOINTERPROC glad_glIndexPointer = glad_on_demand_impl_glIndexPointer;
static void GLAD_API_PTR glad_on_demand_impl_glIndexd(GLdouble c) {
    glad_glIndexd = (PFNGLINDEXDPROC) glad_gl_on_demand_loader("glIndexd");
    glad_glIndexd(c);
}
PFNGLINDEXDPROC glad_glIndexd = glad_on_demand_impl_glIndexd;
static void GLAD_API_PTR glad_on_demand_impl_glIndexdv(const GLdouble * c) {
    glad_glIndexdv = (PFNGLINDEXDVPROC) glad_gl_on_demand_loader("glIndexdv");
    glad_glIndexdv(c);
}
PFNGLINDEXDVPROC glad_glIndexdv = glad_on_demand_impl_glIndexdv;
static void GLAD_API_PTR glad_on_demand_impl_glIndexf(GLfloat c) {
    glad_glIndexf = (PFNGLINDEXFPROC) glad_gl_on_demand_loader("glIndexf");
    glad_glIndexf(c);
}
PFNGLINDEXFPROC glad_glIndexf = glad_on_demand_impl_glIndexf;
static void GLAD_API_PTR glad_on_demand_impl_glIndexfv(const GLfloat * c) {
    glad_glIndexfv = (PFNGLINDEXFVPROC) glad_gl_on_demand_loader("glIndexfv");
    glad_glIndexfv(c);
}
PFNGLINDEXFVPROC glad_glIndexfv = glad_on_demand_impl_glIndexfv;
static void GLAD_API_PTR glad_on_demand_impl_glIndexi(GLint c) {
    glad_glIndexi = (PFNGLINDEXIPROC) glad_gl_on_demand_loader("glIndexi");
    glad_glIndexi(c);
}
PFNGLINDEXIPROC glad_glIndexi = glad_on_demand_impl_glIndexi;
static void GLAD_API_PTR glad_on_demand_impl_glIndexiv(const GLint * c) {
    glad_glIndexiv = (PFNGLINDEXIVPROC) glad_gl_on_demand_loader("glIndexiv");
    glad_glIndexiv(c);
}
PFNGLINDEXIVPROC glad_glIndexiv = glad_on_demand_impl_glIndexiv;
static void GLAD_API_PTR glad_on_demand_impl_glIndexs(GLshort c) {
    glad_glIndexs = (PFNGLINDEXSPROC) glad_gl_on_demand_loader("glIndexs");
    glad_glIndexs(c);
}
PFNGLINDEXSPROC glad_glIndexs = glad_on_demand_impl_glIndexs;
static void GLAD_API_PTR glad_on_demand_impl_glIndexsv(const GLshort * c) {
    glad_glIndexsv = (PFNGLINDEXSVPROC) glad_gl_on_demand_loader("glIndexsv");
    glad_glIndexsv(c);
}
PFNGLINDEXSVPROC glad_glIndexsv = glad_on_demand_impl_glIndexsv;
static void GLAD_API_PTR glad_on_demand_impl_glIndexub(GLubyte c) {
    glad_glIndexub = (PFNGLINDEXUBPROC) glad_gl_on_demand_loader("glIndexub");
    glad_glIndexub(c);
}
PFNGLINDEXUBPROC glad_glIndexub = glad_on_demand_impl_glIndexub;
static void GLAD_API_PTR glad_on_demand_impl_glIndexubv(const GLubyte * c) {
    glad_glIndexubv = (PFNGLINDEXUBVPROC) glad_gl_on_demand_loader("glIndexubv");
    glad_glIndexubv(c);
}
PFNGLINDEXUBVPROC glad_glIndexubv = glad_on_demand_impl_glIndexubv;
static void GLAD_API_PTR glad_on_demand_impl_glInitNames(void) {
    glad_glInitNames = (PFNGLINITNAMESPROC) glad_gl_on_demand_loader("glInitNames");
    glad_glInitNames();
}
PFNGLINITNAMESPROC glad_glInitNames = glad_on_demand_impl_glInitNames;
static void GLAD_API_PTR glad_on_demand_impl_glInterleavedArrays(GLenum format, GLsizei stride, const void * pointer) {
    glad_glInterleavedArrays = (PFNGLINTERLEAVEDARRAYSPROC) glad_gl_on_demand_loader("glInterleavedArrays");
    glad_glInterleavedArrays(format, stride, pointer);
}
PFNGLINTERLEAVEDARRAYSPROC glad_glInterleavedArrays = glad_on_demand_impl_glInterleavedArrays;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsEnabled(GLenum cap) {
    glad_glIsEnabled = (PFNGLISENABLEDPROC) glad_gl_on_demand_loader("glIsEnabled");
    return glad_glIsEnabled(cap);
}
PFNGLISENABLEDPROC glad_glIsEnabled = glad_on_demand_impl_glIsEnabled;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsList(GLuint list) {
    glad_glIsList = (PFNGLISLISTPROC) glad_gl_on_demand_loader("glIsList");
    return glad_glIsList(list);
}
PFNGLISLISTPROC glad_glIsList = glad_on_demand_impl_glIsList;
static GLboolean GLAD_API_PTR glad_on_demand_impl_glIsTexture(GLuint texture) {
    glad_glIsTexture = (PFNGLISTEXTUREPROC) glad_gl_on_demand_loader("glIsTexture");
    return glad_glIsTexture(texture);
}
PFNGLISTEXTUREPROC glad_glIsTexture = glad_on_demand_impl_glIsTexture;
static void GLAD_API_PTR glad_on_demand_impl_glLightModelf(GLenum pname, GLfloat param) {
    glad_glLightModelf = (PFNGLLIGHTMODELFPROC) glad_gl_on_demand_loader("glLightModelf");
    glad_glLightModelf(pname, param);
}
PFNGLLIGHTMODELFPROC glad_glLightModelf = glad_on_demand_impl_glLightModelf;
static void GLAD_API_PTR glad_on_demand_impl_glLightModelfv(GLenum pname, const GLfloat * params) {
    glad_glLightModelfv = (PFNGLLIGHTMODELFVPROC) glad_gl_on_demand_loader("glLightModelfv");
    glad_glLightModelfv(pname, params);
}
PFNGLLIGHTMODELFVPROC glad_glLightModelfv = glad_on_demand_impl_glLightModelfv;
static void GLAD_API_PTR glad_on_demand_impl_glLightModeli(GLenum pname, GLint param) {
    glad_glLightModeli = (PFNGLLIGHTMODELIPROC) glad_gl_on_demand_loader("glLightModeli");
    glad_glLightModeli(pname, param);
}
PFNGLLIGHTMODELIPROC glad_glLightModeli = glad_on_demand_impl_glLightModeli;
static void GLAD_API_PTR glad_on_demand_impl_glLightModeliv(GLenum pname, const GLint * params) {
    glad_glLightModeliv = (PFNGLLIGHTMODELIVPROC) glad_gl_on_demand_loader("glLightModeliv");
    glad_glLightModeliv(pname, params);
}
PFNGLLIGHTMODELIVPROC glad_glLightModeliv = glad_on_demand_impl_glLightModeliv;
static void GLAD_API_PTR glad_on_demand_impl_glLightf(GLenum light, GLenum pname, GLfloat param) {
    glad_glLightf = (PFNGLLIGHTFPROC) glad_gl_on_demand_loader("glLightf");
    glad_glLightf(light, pname, param);
}
PFNGLLIGHTFPROC glad_glLightf = glad_on_demand_impl_glLightf;
static void GLAD_API_PTR glad_on_demand_impl_glLightfv(GLenum light, GLenum pname, const GLfloat * params) {
    glad_glLightfv = (PFNGLLIGHTFVPROC) glad_gl_on_demand_loader("glLightfv");
    glad_glLightfv(light, pname, params);
}
PFNGLLIGHTFVPROC glad_glLightfv = glad_on_demand_impl_glLightfv;
static void GLAD_API_PTR glad_on_demand_impl_glLighti(GLenum light, GLenum pname, GLint param) {
    glad_glLighti = (PFNGLLIGHTIPROC) glad_gl_on_demand_loader("glLighti");
    glad_glLighti(light, pname, param);
}
PFNGLLIGHTIPROC glad_glLighti = glad_on_demand_impl_glLighti;
static void GLAD_API_PTR glad_on_demand_impl_glLightiv(GLenum light, GLenum pname, const GLint * params) {
    glad_glLightiv = (PFNGLLIGHTIVPROC) glad_gl_on_demand_loader("glLightiv");
    glad_glLightiv(light, pname, params);
}
PFNGLLIGHTIVPROC glad_glLightiv = glad_on_demand_impl_glLightiv;
static void GLAD_API_PTR glad_on_demand_impl_glLineStipple(GLint factor, GLushort pattern) {
    glad_glLineStipple = (PFNGLLINESTIPPLEPROC) glad_gl_on_demand_loader("glLineStipple");
    glad_glLineStipple(factor, pattern);
}
PFNGLLINESTIPPLEPROC glad_glLineStipple = glad_on_demand_impl_glLineStipple;
static void GLAD_API_PTR glad_on_demand_impl_glLineWidth(GLfloat width) {
    glad_glLineWidth = (PFNGLLINEWIDTHPROC) glad_gl_on_demand_loader("glLineWidth");
    glad_glLineWidth(width);
}
PFNGLLINEWIDTHPROC glad_glLineWidth = glad_on_demand_impl_glLineWidth;
static void GLAD_API_PTR glad_on_demand_impl_glListBase(GLuint base) {
    glad_glListBase = (PFNGLLISTBASEPROC) glad_gl_on_demand_loader("glListBase");
    glad_glListBase(base);
}
PFNGLLISTBASEPROC glad_glListBase = glad_on_demand_impl_glListBase;
static void GLAD_API_PTR glad_on_demand_impl_glLoadIdentity(void) {
    glad_glLoadIdentity = (PFNGLLOADIDENTITYPROC) glad_gl_on_demand_loader("glLoadIdentity");
    glad_glLoadIdentity();
}
PFNGLLOADIDENTITYPROC glad_glLoadIdentity = glad_on_demand_impl_glLoadIdentity;
static void GLAD_API_PTR glad_on_demand_impl_glLoadMatrixd(const GLdouble * m) {
    glad_glLoadMatrixd = (PFNGLLOADMATRIXDPROC) glad_gl_on_demand_loader("glLoadMatrixd");
    glad_glLoadMatrixd(m);
}
PFNGLLOADMATRIXDPROC glad_glLoadMatrixd = glad_on_demand_impl_glLoadMatrixd;
static void GLAD_API_PTR glad_on_demand_impl_glLoadMatrixf(const GLfloat * m) {
    glad_glLoadMatrixf = (PFNGLLOADMATRIXFPROC) glad_gl_on_demand_loader("glLoadMatrixf");
    glad_glLoadMatrixf(m);
}
PFNGLLOADMATRIXFPROC glad_glLoadMatrixf = glad_on_demand_impl_glLoadMatrixf;
static void GLAD_API_PTR glad_on_demand_impl_glLoadName(GLuint name) {
    glad_glLoadName = (PFNGLLOADNAMEPROC) glad_gl_on_demand_loader("glLoadName");
    glad_glLoadName(name);
}
PFNGLLOADNAMEPROC glad_glLoadName = glad_on_demand_impl_glLoadName;
static void GLAD_API_PTR glad_on_demand_impl_glLogicOp(GLenum opcode) {
    glad_glLogicOp = (PFNGLLOGICOPPROC) glad_gl_on_demand_loader("glLogicOp");
    glad_glLogicOp(opcode);
}
PFNGLLOGICOPPROC glad_glLogicOp = glad_on_demand_impl_glLogicOp;
static void GLAD_API_PTR glad_on_demand_impl_glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) {
    glad_glMap1d = (PFNGLMAP1DPROC) glad_gl_on_demand_loader("glMap1d");
    glad_glMap1d(target, u1, u2, stride, order, points);
}
PFNGLMAP1DPROC glad_glMap1d = glad_on_demand_impl_glMap1d;
static void GLAD_API_PTR glad_on_demand_impl_glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) {
    glad_glMap1f = (PFNGLMAP1FPROC) glad_gl_on_demand_loader("glMap1f");
    glad_glMap1f(target, u1, u2, stride, order, points);
}
PFNGLMAP1FPROC glad_glMap1f = glad_on_demand_impl_glMap1f;
static void GLAD_API_PTR glad_on_demand_impl_glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) {
    glad_glMap2d = (PFNGLMAP2DPROC) glad_gl_on_demand_loader("glMap2d");
    glad_glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
PFNGLMAP2DPROC glad_glMap2d = glad_on_demand_impl_glMap2d;
static void GLAD_API_PTR glad_on_demand_impl_glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) {
    glad_glMap2f = (PFNGLMAP2FPROC) glad_gl_on_demand_loader("glMap2f");
    glad_glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
}
PFNGLMAP2FPROC glad_glMap2f = glad_on_demand_impl_glMap2f;
static void GLAD_API_PTR glad_on_demand_impl_glMapGrid1d(GLint un, GLdouble u1, GLdouble u2) {
    glad_glMapGrid1d = (PFNGLMAPGRID1DPROC) glad_gl_on_demand_loader("glMapGrid1d");
    glad_glMapGrid1d(un, u1, u2);
}
PFNGLMAPGRID1DPROC glad_glMapGrid1d = glad_on_demand_impl_glMapGrid1d;
static void GLAD_API_PTR glad_on_demand_impl_glMapGrid1f(GLint un, GLfloat u1, GLfloat u2) {
    glad_glMapGrid1f = (PFNGLMAPGRID1FPROC) glad_gl_on_demand_loader("glMapGrid1f");
    glad_glMapGrid1f(un, u1, u2);
}
PFNGLMAPGRID1FPROC glad_glMapGrid1f = glad_on_demand_impl_glMapGrid1f;
static void GLAD_API_PTR glad_on_demand_impl_glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
    glad_glMapGrid2d = (PFNGLMAPGRID2DPROC) glad_gl_on_demand_loader("glMapGrid2d");
    glad_glMapGrid2d(un, u1, u2, vn, v1, v2);
}
PFNGLMAPGRID2DPROC glad_glMapGrid2d = glad_on_demand_impl_glMapGrid2d;
static void GLAD_API_PTR glad_on_demand_impl_glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
    glad_glMapGrid2f = (PFNGLMAPGRID2FPROC) glad_gl_on_demand_loader("glMapGrid2f");
    glad_glMapGrid2f(un, u1, u2, vn, v1, v2);
}
PFNGLMAPGRID2FPROC glad_glMapGrid2f = glad_on_demand_impl_glMapGrid2f;
static void GLAD_API_PTR glad_on_demand_impl_glMaterialf(GLenum face, GLenum pname, GLfloat param) {
    glad_glMaterialf = (PFNGLMATERIALFPROC) glad_gl_on_demand_loader("glMaterialf");
    glad_glMaterialf(face, pname, param);
}
PFNGLMATERIALFPROC glad_glMaterialf = glad_on_demand_impl_glMaterialf;
static void GLAD_API_PTR glad_on_demand_impl_glMaterialfv(GLenum face, GLenum pname, const GLfloat * params) {
    glad_glMaterialfv = (PFNGLMATERIALFVPROC) glad_gl_on_demand_loader("glMaterialfv");
    glad_glMaterialfv(face, pname, params);
}
PFNGLMATERIALFVPROC glad_glMaterialfv = glad_on_demand_impl_glMaterialfv;
static void GLAD_API_PTR glad_on_demand_impl_glMateriali(GLenum face, GLenum pname, GLint param) {
    glad_glMateriali = (PFNGLMATERIALIPROC) glad_gl_on_demand_loader("glMateriali");
    glad_glMateriali(face, pname, param);
}
PFNGLMATERIALIPROC glad_glMateriali = glad_on_demand_impl_glMateriali;
static void GLAD_API_PTR glad_on_demand_impl_glMaterialiv(GLenum face, GLenum pname, const GLint * params) {
    glad_glMaterialiv = (PFNGLMATERIALIVPROC) glad_gl_on_demand_loader("glMaterialiv");
    glad_glMaterialiv(face, pname, params);
}
PFNGLMATERIALIVPROC glad_glMaterialiv = glad_on_demand_impl_glMaterialiv;
static void GLAD_API_PTR glad_on_demand_impl_glMatrixMode(GLenum mode) {
    glad_glMatrixMode = (PFNGLMATRIXMODEPROC) glad_gl_on_demand_loader("glMatrixMode");
    glad_glMatrixMode(mode);
}
PFNGLMATRIXMODEPROC glad_glMatrixMode = glad_on_demand_impl_glMatrixMode;
static void GLAD_API_PTR glad_on_demand_impl_glMultMatrixd(const GLdouble * m) {
    glad_glMultMatrixd = (PFNGLMULTMATRIXDPROC) glad_gl_on_demand_loader("glMultMatrixd");
    glad_glMultMatrixd(m);
}
PFNGLMULTMATRIXDPROC glad_glMultMatrixd = glad_on_demand_impl_glMultMatrixd;
static void GLAD_API_PTR glad_on_demand_impl_glMultMatrixf(const GLfloat * m) {
    glad_glMultMatrixf = (PFNGLMULTMATRIXFPROC) glad_gl_on_demand_loader("glMultMatrixf");
    glad_glMultMatrixf(m);
}
PFNGLMULTMATRIXFPROC glad_glMultMatrixf = glad_on_demand_impl_glMultMatrixf;
static void GLAD_API_PTR glad_on_demand_impl_glNewList(GLuint list, GLenum mode) {
    glad_glNewList = (PFNGLNEWLISTPROC) glad_gl_on_demand_loader("glNewList");
    glad_glNewList(list, mode);
}
PFNGLNEWLISTPROC glad_glNewList = glad_on_demand_impl_glNewList;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) {
    glad_glNormal3b = (PFNGLNORMAL3BPROC) glad_gl_on_demand_loader("glNormal3b");
    glad_glNormal3b(nx, ny, nz);
}
PFNGLNORMAL3BPROC glad_glNormal3b = glad_on_demand_impl_glNormal3b;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3bv(const GLbyte * v) {
    glad_glNormal3bv = (PFNGLNORMAL3BVPROC) glad_gl_on_demand_loader("glNormal3bv");
    glad_glNormal3bv(v);
}
PFNGLNORMAL3BVPROC glad_glNormal3bv = glad_on_demand_impl_glNormal3bv;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) {
    glad_glNormal3d = (PFNGLNORMAL3DPROC) glad_gl_on_demand_loader("glNormal3d");
    glad_glNormal3d(nx, ny, nz);
}
PFNGLNORMAL3DPROC glad_glNormal3d = glad_on_demand_impl_glNormal3d;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3dv(const GLdouble * v) {
    glad_glNormal3dv = (PFNGLNORMAL3DVPROC) glad_gl_on_demand_loader("glNormal3dv");
    glad_glNormal3dv(v);
}
PFNGLNORMAL3DVPROC glad_glNormal3dv = glad_on_demand_impl_glNormal3dv;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) {
    glad_glNormal3f = (PFNGLNORMAL3FPROC) glad_gl_on_demand_loader("glNormal3f");
    glad_glNormal3f(nx, ny, nz);
}
PFNGLNORMAL3FPROC glad_glNormal3f = glad_on_demand_impl_glNormal3f;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3fv(const GLfloat * v) {
    glad_glNormal3fv = (PFNGLNORMAL3FVPROC) glad_gl_on_demand_loader("glNormal3fv");
    glad_glNormal3fv(v);
}
PFNGLNORMAL3FVPROC glad_glNormal3fv = glad_on_demand_impl_glNormal3fv;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3i(GLint nx, GLint ny, GLint nz) {
    glad_glNormal3i = (PFNGLNORMAL3IPROC) glad_gl_on_demand_loader("glNormal3i");
    glad_glNormal3i(nx, ny, nz);
}
PFNGLNORMAL3IPROC glad_glNormal3i = glad_on_demand_impl_glNormal3i;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3iv(const GLint * v) {
    glad_glNormal3iv = (PFNGLNORMAL3IVPROC) glad_gl_on_demand_loader("glNormal3iv");
    glad_glNormal3iv(v);
}
PFNGLNORMAL3IVPROC glad_glNormal3iv = glad_on_demand_impl_glNormal3iv;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3s(GLshort nx, GLshort ny, GLshort nz) {
    glad_glNormal3s = (PFNGLNORMAL3SPROC) glad_gl_on_demand_loader("glNormal3s");
    glad_glNormal3s(nx, ny, nz);
}
PFNGLNORMAL3SPROC glad_glNormal3s = glad_on_demand_impl_glNormal3s;
static void GLAD_API_PTR glad_on_demand_impl_glNormal3sv(const GLshort * v) {
    glad_glNormal3sv = (PFNGLNORMAL3SVPROC) glad_gl_on_demand_loader("glNormal3sv");
    glad_glNormal3sv(v);
}
PFNGLNORMAL3SVPROC glad_glNormal3sv = glad_on_demand_impl_glNormal3sv;
static void GLAD_API_PTR glad_on_demand_impl_glNormalPointer(GLenum type, GLsizei stride, const void * pointer) {
    glad_glNormalPointer = (PFNGLNORMALPOINTERPROC) glad_gl_on_demand_loader("glNormalPointer");
    glad_glNormalPointer(type, stride, pointer);
}
PFNGLNORMALPOINTERPROC glad_glNormalPointer = glad_on_demand_impl_glNormalPointer;
static void GLAD_API_PTR glad_on_demand_impl_glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
    glad_glOrtho = (PFNGLORTHOPROC) glad_gl_on_demand_loader("glOrtho");
    glad_glOrtho(left, right, bottom, top, zNear, zFar);
}
PFNGLORTHOPROC glad_glOrtho = glad_on_demand_impl_glOrtho;
static void GLAD_API_PTR glad_on_demand_impl_glPassThrough(GLfloat token) {
    glad_glPassThrough = (PFNGLPASSTHROUGHPROC) glad_gl_on_demand_loader("glPassThrough");
    glad_glPassThrough(token);
}
PFNGLPASSTHROUGHPROC glad_glPassThrough = glad_on_demand_impl_glPassThrough;
static void GLAD_API_PTR glad_on_demand_impl_glPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values) {
    glad_glPixelMapfv = (PFNGLPIXELMAPFVPROC) glad_gl_on_demand_loader("glPixelMapfv");
    glad_glPixelMapfv(map, mapsize, values);
}
PFNGLPIXELMAPFVPROC glad_glPixelMapfv = glad_on_demand_impl_glPixelMapfv;
static void GLAD_API_PTR glad_on_demand_impl_glPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values) {
    glad_glPixelMapuiv = (PFNGLPIXELMAPUIVPROC) glad_gl_on_demand_loader("glPixelMapuiv");
    glad_glPixelMapuiv(map, mapsize, values);
}
PFNGLPIXELMAPUIVPROC glad_glPixelMapuiv = glad_on_demand_impl_glPixelMapuiv;
static void GLAD_API_PTR glad_on_demand_impl_glPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values) {
    glad_glPixelMapusv = (PFNGLPIXELMAPUSVPROC) glad_gl_on_demand_loader("glPixelMapusv");
    glad_glPixelMapusv(map, mapsize, values);
}
PFNGLPIXELMAPUSVPROC glad_glPixelMapusv = glad_on_demand_impl_glPixelMapusv;
static void GLAD_API_PTR glad_on_demand_impl_glPixelStoref(GLenum pname, GLfloat param) {
    glad_glPixelStoref = (PFNGLPIXELSTOREFPROC) glad_gl_on_demand_loader("glPixelStoref");
    glad_glPixelStoref(pname, param);
}
PFNGLPIXELSTOREFPROC glad_glPixelStoref = glad_on_demand_impl_glPixelStoref;
static void GLAD_API_PTR glad_on_demand_impl_glPixelStorei(GLenum pname, GLint param) {
    glad_glPixelStorei = (PFNGLPIXELSTOREIPROC) glad_gl_on_demand_loader("glPixelStorei");
    glad_glPixelStorei(pname, param);
}
PFNGLPIXELSTOREIPROC glad_glPixelStorei = glad_on_demand_impl_glPixelStorei;
static void GLAD_API_PTR glad_on_demand_impl_glPixelTransferf(GLenum pname, GLfloat param) {
    glad_glPixelTransferf = (PFNGLPIXELTRANSFERFPROC) glad_gl_on_demand_loader("glPixelTransferf");
    glad_glPixelTransferf(pname, param);
}
PFNGLPIXELTRANSFERFPROC glad_glPixelTransferf = glad_on_demand_impl_glPixelTransferf;
static void GLAD_API_PTR glad_on_demand_impl_glPixelTransferi(GLenum pname, GLint param) {
    glad_glPixelTransferi = (PFNGLPIXELTRANSFERIPROC) glad_gl_on_demand_loader("glPixelTransferi");
    glad_glPixelTransferi(pname, param);
}
PFNGLPIXELTRANSFERIPROC glad_glPixelTransferi = glad_on_demand_impl_glPixelTransferi;
static void GLAD_API_PTR glad_on_demand_impl_glPixelZoom(GLfloat xfactor, GLfloat yfactor) {
    glad_glPixelZoom = (PFNGLPIXELZOOMPROC) glad_gl_on_demand_loader("glPixelZoom");
    glad_glPixelZoom(xfactor, yfactor);
}
PFNGLPIXELZOOMPROC glad_glPixelZoom = glad_on_demand_impl_glPixelZoom;
static void GLAD_API_PTR glad_on_demand_impl_glPointSize(GLfloat size) {
    glad_glPointSize = (PFNGLPOINTSIZEPROC) glad_gl_on_demand_loader("glPointSize");
    glad_glPointSize(size);
}
PFNGLPOINTSIZEPROC glad_glPointSize = glad_on_demand_impl_glPointSize;
static void GLAD_API_PTR glad_on_demand_impl_glPolygonMode(GLenum face, GLenum mode) {
    glad_glPolygonMode = (PFNGLPOLYGONMODEPROC) glad_gl_on_demand_loader("glPolygonMode");
    glad_glPolygonMode(face, mode);
}
PFNGLPOLYGONMODEPROC glad_glPolygonMode = glad_on_demand_impl_glPolygonMode;
static void GLAD_API_PTR glad_on_demand_impl_glPolygonOffset(GLfloat factor, GLfloat units) {
    glad_glPolygonOffset = (PFNGLPOLYGONOFFSETPROC) glad_gl_on_demand_loader("glPolygonOffset");
    glad_glPolygonOffset(factor, units);
}
PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset = glad_on_demand_impl_glPolygonOffset;
static void GLAD_API_PTR glad_on_demand_impl_glPolygonStipple(const GLubyte * mask) {
    glad_glPolygonStipple = (PFNGLPOLYGONSTIPPLEPROC) glad_gl_on_demand_loader("glPolygonStipple");
    glad_glPolygonStipple(mask);
}
PFNGLPOLYGONSTIPPLEPROC glad_glPolygonStipple = glad_on_demand_impl_glPolygonStipple;
static void GLAD_API_PTR glad_on_demand_impl_glPopAttrib(void) {
    glad_glPopAttrib = (PFNGLPOPATTRIBPROC) glad_gl_on_demand_loader("glPopAttrib");
    glad_glPopAttrib();
}
PFNGLPOPATTRIBPROC glad_glPopAttrib = glad_on_demand_impl_glPopAttrib;
static void GLAD_API_PTR glad_on_demand_impl_glPopClientAttrib(void) {
    glad_glPopClientAttrib = (PFNGLPOPCLIENTATTRIBPROC) glad_gl_on_demand_loader("glPopClientAttrib");
    glad_glPopClientAttrib();
}
PFNGLPOPCLIENTATTRIBPROC glad_glPopClientAttrib = glad_on_demand_impl_glPopClientAttrib;
static void GLAD_API_PTR glad_on_demand_impl_glPopMatrix(void) {
    glad_glPopMatrix = (PFNGLPOPMATRIXPROC) glad_gl_on_demand_loader("glPopMatrix");
    glad_glPopMatrix();
}
PFNGLPOPMATRIXPROC glad_glPopMatrix = glad_on_demand_impl_glPopMatrix;
static void GLAD_API_PTR glad_on_demand_impl_glPopName(void) {
    glad_glPopName = (PFNGLPOPNAMEPROC) glad_gl_on_demand_loader("glPopName");
    glad_glPopName();
}
PFNGLPOPNAMEPROC glad_glPopName = glad_on_demand_impl_glPopName;
static void GLAD_API_PTR glad_on_demand_impl_glPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities) {
    glad_glPrioritizeTextures = (PFNGLPRIORITIZETEXTURESPROC) glad_gl_on_demand_loader("glPrioritizeTextures");
    glad_glPrioritizeTextures(n, textures, priorities);
}
PFNGLPRIORITIZETEXTURESPROC glad_glPrioritizeTextures = glad_on_demand_impl_glPrioritizeTextures;
static void GLAD_API_PTR glad_on_demand_impl_glPushAttrib(GLbitfield mask) {
    glad_glPushAttrib = (PFNGLPUSHATTRIBPROC) glad_gl_on_demand_loader("glPushAttrib");
    glad_glPushAttrib(mask);
}
PFNGLPUSHATTRIBPROC glad_glPushAttrib = glad_on_demand_impl_glPushAttrib;
static void GLAD_API_PTR glad_on_demand_impl_glPushClientAttrib(GLbitfield mask) {
    glad_glPushClientAttrib = (PFNGLPUSHCLIENTATTRIBPROC) glad_gl_on_demand_loader("glPushClientAttrib");
    glad_glPushClientAttrib(mask);
}
PFNGLPUSHCLIENTATTRIBPROC glad_glPushClientAttrib = glad_on_demand_impl_glPushClientAttrib;
static void GLAD_API_PTR glad_on_demand_impl_glPushMatrix(void) {
    glad_glPushMatrix = (PFNGLPUSHMATRIXPROC) glad_gl_on_demand_loader("glPushMatrix");
    glad_glPushMatrix();
}
PFNGLPUSHMATRIXPROC glad_glPushMatrix = glad_on_demand_impl_glPushMatrix;
static void GLAD_API_PTR glad_on_demand_impl_glPushName(GLuint name) {
    glad_glPushName = (PFNGLPUSHNAMEPROC) glad_gl_on_demand_loader("glPushName");
    glad_glPushName(name);
}
PFNGLPUSHNAMEPROC glad_glPushName = glad_on_demand_impl_glPushName;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2d(GLdouble x, GLdouble y) {
    glad_glRasterPos2d = (PFNGLRASTERPOS2DPROC) glad_gl_on_demand_loader("glRasterPos2d");
    glad_glRasterPos2d(x, y);
}
PFNGLRASTERPOS2DPROC glad_glRasterPos2d = glad_on_demand_impl_glRasterPos2d;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2dv(const GLdouble * v) {
    glad_glRasterPos2dv = (PFNGLRASTERPOS2DVPROC) glad_gl_on_demand_loader("glRasterPos2dv");
    glad_glRasterPos2dv(v);
}
PFNGLRASTERPOS2DVPROC glad_glRasterPos2dv = glad_on_demand_impl_glRasterPos2dv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2f(GLfloat x, GLfloat y) {
    glad_glRasterPos2f = (PFNGLRASTERPOS2FPROC) glad_gl_on_demand_loader("glRasterPos2f");
    glad_glRasterPos2f(x, y);
}
PFNGLRASTERPOS2FPROC glad_glRasterPos2f = glad_on_demand_impl_glRasterPos2f;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2fv(const GLfloat * v) {
    glad_glRasterPos2fv = (PFNGLRASTERPOS2FVPROC) glad_gl_on_demand_loader("glRasterPos2fv");
    glad_glRasterPos2fv(v);
}
PFNGLRASTERPOS2FVPROC glad_glRasterPos2fv = glad_on_demand_impl_glRasterPos2fv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2i(GLint x, GLint y) {
    glad_glRasterPos2i = (PFNGLRASTERPOS2IPROC) glad_gl_on_demand_loader("glRasterPos2i");
    glad_glRasterPos2i(x, y);
}
PFNGLRASTERPOS2IPROC glad_glRasterPos2i = glad_on_demand_impl_glRasterPos2i;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2iv(const GLint * v) {
    glad_glRasterPos2iv = (PFNGLRASTERPOS2IVPROC) glad_gl_on_demand_loader("glRasterPos2iv");
    glad_glRasterPos2iv(v);
}
PFNGLRASTERPOS2IVPROC glad_glRasterPos2iv = glad_on_demand_impl_glRasterPos2iv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2s(GLshort x, GLshort y) {
    glad_glRasterPos2s = (PFNGLRASTERPOS2SPROC) glad_gl_on_demand_loader("glRasterPos2s");
    glad_glRasterPos2s(x, y);
}
PFNGLRASTERPOS2SPROC glad_glRasterPos2s = glad_on_demand_impl_glRasterPos2s;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos2sv(const GLshort * v) {
    glad_glRasterPos2sv = (PFNGLRASTERPOS2SVPROC) glad_gl_on_demand_loader("glRasterPos2sv");
    glad_glRasterPos2sv(v);
}
PFNGLRASTERPOS2SVPROC glad_glRasterPos2sv = glad_on_demand_impl_glRasterPos2sv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3d(GLdouble x, GLdouble y, GLdouble z) {
    glad_glRasterPos3d = (PFNGLRASTERPOS3DPROC) glad_gl_on_demand_loader("glRasterPos3d");
    glad_glRasterPos3d(x, y, z);
}
PFNGLRASTERPOS3DPROC glad_glRasterPos3d = glad_on_demand_impl_glRasterPos3d;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3dv(const GLdouble * v) {
    glad_glRasterPos3dv = (PFNGLRASTERPOS3DVPROC) glad_gl_on_demand_loader("glRasterPos3dv");
    glad_glRasterPos3dv(v);
}
PFNGLRASTERPOS3DVPROC glad_glRasterPos3dv = glad_on_demand_impl_glRasterPos3dv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3f(GLfloat x, GLfloat y, GLfloat z) {
    glad_glRasterPos3f = (PFNGLRASTERPOS3FPROC) glad_gl_on_demand_loader("glRasterPos3f");
    glad_glRasterPos3f(x, y, z);
}
PFNGLRASTERPOS3FPROC glad_glRasterPos3f = glad_on_demand_impl_glRasterPos3f;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3fv(const GLfloat * v) {
    glad_glRasterPos3fv = (PFNGLRASTERPOS3FVPROC) glad_gl_on_demand_loader("glRasterPos3fv");
    glad_glRasterPos3fv(v);
}
PFNGLRASTERPOS3FVPROC glad_glRasterPos3fv = glad_on_demand_impl_glRasterPos3fv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3i(GLint x, GLint y, GLint z) {
    glad_glRasterPos3i = (PFNGLRASTERPOS3IPROC) glad_gl_on_demand_loader("glRasterPos3i");
    glad_glRasterPos3i(x, y, z);
}
PFNGLRASTERPOS3IPROC glad_glRasterPos3i = glad_on_demand_impl_glRasterPos3i;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3iv(const GLint * v) {
    glad_glRasterPos3iv = (PFNGLRASTERPOS3IVPROC) glad_gl_on_demand_loader("glRasterPos3iv");
    glad_glRasterPos3iv(v);
}
PFNGLRASTERPOS3IVPROC glad_glRasterPos3iv = glad_on_demand_impl_glRasterPos3iv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3s(GLshort x, GLshort y, GLshort z) {
    glad_glRasterPos3s = (PFNGLRASTERPOS3SPROC) glad_gl_on_demand_loader("glRasterPos3s");
    glad_glRasterPos3s(x, y, z);
}
PFNGLRASTERPOS3SPROC glad_glRasterPos3s = glad_on_demand_impl_glRasterPos3s;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos3sv(const GLshort * v) {
    glad_glRasterPos3sv = (PFNGLRASTERPOS3SVPROC) glad_gl_on_demand_loader("glRasterPos3sv");
    glad_glRasterPos3sv(v);
}
PFNGLRASTERPOS3SVPROC glad_glRasterPos3sv = glad_on_demand_impl_glRasterPos3sv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glRasterPos4d = (PFNGLRASTERPOS4DPROC) glad_gl_on_demand_loader("glRasterPos4d");
    glad_glRasterPos4d(x, y, z, w);
}
PFNGLRASTERPOS4DPROC glad_glRasterPos4d = glad_on_demand_impl_glRasterPos4d;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4dv(const GLdouble * v) {
    glad_glRasterPos4dv = (PFNGLRASTERPOS4DVPROC) glad_gl_on_demand_loader("glRasterPos4dv");
    glad_glRasterPos4dv(v);
}
PFNGLRASTERPOS4DVPROC glad_glRasterPos4dv = glad_on_demand_impl_glRasterPos4dv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glRasterPos4f = (PFNGLRASTERPOS4FPROC) glad_gl_on_demand_loader("glRasterPos4f");
    glad_glRasterPos4f(x, y, z, w);
}
PFNGLRASTERPOS4FPROC glad_glRasterPos4f = glad_on_demand_impl_glRasterPos4f;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4fv(const GLfloat * v) {
    glad_glRasterPos4fv = (PFNGLRASTERPOS4FVPROC) glad_gl_on_demand_loader("glRasterPos4fv");
    glad_glRasterPos4fv(v);
}
PFNGLRASTERPOS4FVPROC glad_glRasterPos4fv = glad_on_demand_impl_glRasterPos4fv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4i(GLint x, GLint y, GLint z, GLint w) {
    glad_glRasterPos4i = (PFNGLRASTERPOS4IPROC) glad_gl_on_demand_loader("glRasterPos4i");
    glad_glRasterPos4i(x, y, z, w);
}
PFNGLRASTERPOS4IPROC glad_glRasterPos4i = glad_on_demand_impl_glRasterPos4i;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4iv(const GLint * v) {
    glad_glRasterPos4iv = (PFNGLRASTERPOS4IVPROC) glad_gl_on_demand_loader("glRasterPos4iv");
    glad_glRasterPos4iv(v);
}
PFNGLRASTERPOS4IVPROC glad_glRasterPos4iv = glad_on_demand_impl_glRasterPos4iv;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glRasterPos4s = (PFNGLRASTERPOS4SPROC) glad_gl_on_demand_loader("glRasterPos4s");
    glad_glRasterPos4s(x, y, z, w);
}
PFNGLRASTERPOS4SPROC glad_glRasterPos4s = glad_on_demand_impl_glRasterPos4s;
static void GLAD_API_PTR glad_on_demand_impl_glRasterPos4sv(const GLshort * v) {
    glad_glRasterPos4sv = (PFNGLRASTERPOS4SVPROC) glad_gl_on_demand_loader("glRasterPos4sv");
    glad_glRasterPos4sv(v);
}
PFNGLRASTERPOS4SVPROC glad_glRasterPos4sv = glad_on_demand_impl_glRasterPos4sv;
static void GLAD_API_PTR glad_on_demand_impl_glReadBuffer(GLenum src) {
    glad_glReadBuffer = (PFNGLREADBUFFERPROC) glad_gl_on_demand_loader("glReadBuffer");
    glad_glReadBuffer(src);
}
PFNGLREADBUFFERPROC glad_glReadBuffer = glad_on_demand_impl_glReadBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) {
    glad_glReadPixels = (PFNGLREADPIXELSPROC) glad_gl_on_demand_loader("glReadPixels");
    glad_glReadPixels(x, y, width, height, format, type, pixels);
}
PFNGLREADPIXELSPROC glad_glReadPixels = glad_on_demand_impl_glReadPixels;
static void GLAD_API_PTR glad_on_demand_impl_glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
    glad_glRectd = (PFNGLRECTDPROC) glad_gl_on_demand_loader("glRectd");
    glad_glRectd(x1, y1, x2, y2);
}
PFNGLRECTDPROC glad_glRectd = glad_on_demand_impl_glRectd;
static void GLAD_API_PTR glad_on_demand_impl_glRectdv(const GLdouble * v1, const GLdouble * v2) {
    glad_glRectdv = (PFNGLRECTDVPROC) glad_gl_on_demand_loader("glRectdv");
    glad_glRectdv(v1, v2);
}
PFNGLRECTDVPROC glad_glRectdv = glad_on_demand_impl_glRectdv;
static void GLAD_API_PTR glad_on_demand_impl_glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
    glad_glRectf = (PFNGLRECTFPROC) glad_gl_on_demand_loader("glRectf");
    glad_glRectf(x1, y1, x2, y2);
}
PFNGLRECTFPROC glad_glRectf = glad_on_demand_impl_glRectf;
static void GLAD_API_PTR glad_on_demand_impl_glRectfv(const GLfloat * v1, const GLfloat * v2) {
    glad_glRectfv = (PFNGLRECTFVPROC) glad_gl_on_demand_loader("glRectfv");
    glad_glRectfv(v1, v2);
}
PFNGLRECTFVPROC glad_glRectfv = glad_on_demand_impl_glRectfv;
static void GLAD_API_PTR glad_on_demand_impl_glRecti(GLint x1, GLint y1, GLint x2, GLint y2) {
    glad_glRecti = (PFNGLRECTIPROC) glad_gl_on_demand_loader("glRecti");
    glad_glRecti(x1, y1, x2, y2);
}
PFNGLRECTIPROC glad_glRecti = glad_on_demand_impl_glRecti;
static void GLAD_API_PTR glad_on_demand_impl_glRectiv(const GLint * v1, const GLint * v2) {
    glad_glRectiv = (PFNGLRECTIVPROC) glad_gl_on_demand_loader("glRectiv");
    glad_glRectiv(v1, v2);
}
PFNGLRECTIVPROC glad_glRectiv = glad_on_demand_impl_glRectiv;
static void GLAD_API_PTR glad_on_demand_impl_glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
    glad_glRects = (PFNGLRECTSPROC) glad_gl_on_demand_loader("glRects");
    glad_glRects(x1, y1, x2, y2);
}
PFNGLRECTSPROC glad_glRects = glad_on_demand_impl_glRects;
static void GLAD_API_PTR glad_on_demand_impl_glRectsv(const GLshort * v1, const GLshort * v2) {
    glad_glRectsv = (PFNGLRECTSVPROC) glad_gl_on_demand_loader("glRectsv");
    glad_glRectsv(v1, v2);
}
PFNGLRECTSVPROC glad_glRectsv = glad_on_demand_impl_glRectsv;
static GLint GLAD_API_PTR glad_on_demand_impl_glRenderMode(GLenum mode) {
    glad_glRenderMode = (PFNGLRENDERMODEPROC) glad_gl_on_demand_loader("glRenderMode");
    return glad_glRenderMode(mode);
}
PFNGLRENDERMODEPROC glad_glRenderMode = glad_on_demand_impl_glRenderMode;
static void GLAD_API_PTR glad_on_demand_impl_glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
    glad_glRotated = (PFNGLROTATEDPROC) glad_gl_on_demand_loader("glRotated");
    glad_glRotated(angle, x, y, z);
}
PFNGLROTATEDPROC glad_glRotated = glad_on_demand_impl_glRotated;
static void GLAD_API_PTR glad_on_demand_impl_glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
    glad_glRotatef = (PFNGLROTATEFPROC) glad_gl_on_demand_loader("glRotatef");
    glad_glRotatef(angle, x, y, z);
}
PFNGLROTATEFPROC glad_glRotatef = glad_on_demand_impl_glRotatef;
static void GLAD_API_PTR glad_on_demand_impl_glScaled(GLdouble x, GLdouble y, GLdouble z) {
    glad_glScaled = (PFNGLSCALEDPROC) glad_gl_on_demand_loader("glScaled");
    glad_glScaled(x, y, z);
}
PFNGLSCALEDPROC glad_glScaled = glad_on_demand_impl_glScaled;
static void GLAD_API_PTR glad_on_demand_impl_glScalef(GLfloat x, GLfloat y, GLfloat z) {
    glad_glScalef = (PFNGLSCALEFPROC) glad_gl_on_demand_loader("glScalef");
    glad_glScalef(x, y, z);
}
PFNGLSCALEFPROC glad_glScalef = glad_on_demand_impl_glScalef;
static void GLAD_API_PTR glad_on_demand_impl_glScissor(GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glScissor = (PFNGLSCISSORPROC) glad_gl_on_demand_loader("glScissor");
    glad_glScissor(x, y, width, height);
}
PFNGLSCISSORPROC glad_glScissor = glad_on_demand_impl_glScissor;
static void GLAD_API_PTR glad_on_demand_impl_glSelectBuffer(GLsizei size, GLuint * buffer) {
    glad_glSelectBuffer = (PFNGLSELECTBUFFERPROC) glad_gl_on_demand_loader("glSelectBuffer");
    glad_glSelectBuffer(size, buffer);
}
PFNGLSELECTBUFFERPROC glad_glSelectBuffer = glad_on_demand_impl_glSelectBuffer;
static void GLAD_API_PTR glad_on_demand_impl_glShadeModel(GLenum mode) {
    glad_glShadeModel = (PFNGLSHADEMODELPROC) glad_gl_on_demand_loader("glShadeModel");
    glad_glShadeModel(mode);
}
PFNGLSHADEMODELPROC glad_glShadeModel = glad_on_demand_impl_glShadeModel;
static void GLAD_API_PTR glad_on_demand_impl_glStencilFunc(GLenum func, GLint ref, GLuint mask) {
    glad_glStencilFunc = (PFNGLSTENCILFUNCPROC) glad_gl_on_demand_loader("glStencilFunc");
    glad_glStencilFunc(func, ref, mask);
}
PFNGLSTENCILFUNCPROC glad_glStencilFunc = glad_on_demand_impl_glStencilFunc;
static void GLAD_API_PTR glad_on_demand_impl_glStencilMask(GLuint mask) {
    glad_glStencilMask = (PFNGLSTENCILMASKPROC) glad_gl_on_demand_loader("glStencilMask");
    glad_glStencilMask(mask);
}
PFNGLSTENCILMASKPROC glad_glStencilMask = glad_on_demand_impl_glStencilMask;
static void GLAD_API_PTR glad_on_demand_impl_glStencilOp(GLenum fail, GLenum zfail, GLenum zpass) {
    glad_glStencilOp = (PFNGLSTENCILOPPROC) glad_gl_on_demand_loader("glStencilOp");
    glad_glStencilOp(fail, zfail, zpass);
}
PFNGLSTENCILOPPROC glad_glStencilOp = glad_on_demand_impl_glStencilOp;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1d(GLdouble s) {
    glad_glTexCoord1d = (PFNGLTEXCOORD1DPROC) glad_gl_on_demand_loader("glTexCoord1d");
    glad_glTexCoord1d(s);
}
PFNGLTEXCOORD1DPROC glad_glTexCoord1d = glad_on_demand_impl_glTexCoord1d;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1dv(const GLdouble * v) {
    glad_glTexCoord1dv = (PFNGLTEXCOORD1DVPROC) glad_gl_on_demand_loader("glTexCoord1dv");
    glad_glTexCoord1dv(v);
}
PFNGLTEXCOORD1DVPROC glad_glTexCoord1dv = glad_on_demand_impl_glTexCoord1dv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1f(GLfloat s) {
    glad_glTexCoord1f = (PFNGLTEXCOORD1FPROC) glad_gl_on_demand_loader("glTexCoord1f");
    glad_glTexCoord1f(s);
}
PFNGLTEXCOORD1FPROC glad_glTexCoord1f = glad_on_demand_impl_glTexCoord1f;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1fv(const GLfloat * v) {
    glad_glTexCoord1fv = (PFNGLTEXCOORD1FVPROC) glad_gl_on_demand_loader("glTexCoord1fv");
    glad_glTexCoord1fv(v);
}
PFNGLTEXCOORD1FVPROC glad_glTexCoord1fv = glad_on_demand_impl_glTexCoord1fv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1i(GLint s) {
    glad_glTexCoord1i = (PFNGLTEXCOORD1IPROC) glad_gl_on_demand_loader("glTexCoord1i");
    glad_glTexCoord1i(s);
}
PFNGLTEXCOORD1IPROC glad_glTexCoord1i = glad_on_demand_impl_glTexCoord1i;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1iv(const GLint * v) {
    glad_glTexCoord1iv = (PFNGLTEXCOORD1IVPROC) glad_gl_on_demand_loader("glTexCoord1iv");
    glad_glTexCoord1iv(v);
}
PFNGLTEXCOORD1IVPROC glad_glTexCoord1iv = glad_on_demand_impl_glTexCoord1iv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1s(GLshort s) {
    glad_glTexCoord1s = (PFNGLTEXCOORD1SPROC) glad_gl_on_demand_loader("glTexCoord1s");
    glad_glTexCoord1s(s);
}
PFNGLTEXCOORD1SPROC glad_glTexCoord1s = glad_on_demand_impl_glTexCoord1s;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord1sv(const GLshort * v) {
    glad_glTexCoord1sv = (PFNGLTEXCOORD1SVPROC) glad_gl_on_demand_loader("glTexCoord1sv");
    glad_glTexCoord1sv(v);
}
PFNGLTEXCOORD1SVPROC glad_glTexCoord1sv = glad_on_demand_impl_glTexCoord1sv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2d(GLdouble s, GLdouble t) {
    glad_glTexCoord2d = (PFNGLTEXCOORD2DPROC) glad_gl_on_demand_loader("glTexCoord2d");
    glad_glTexCoord2d(s, t);
}
PFNGLTEXCOORD2DPROC glad_glTexCoord2d = glad_on_demand_impl_glTexCoord2d;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2dv(const GLdouble * v) {
    glad_glTexCoord2dv = (PFNGLTEXCOORD2DVPROC) glad_gl_on_demand_loader("glTexCoord2dv");
    glad_glTexCoord2dv(v);
}
PFNGLTEXCOORD2DVPROC glad_glTexCoord2dv = glad_on_demand_impl_glTexCoord2dv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2f(GLfloat s, GLfloat t) {
    glad_glTexCoord2f = (PFNGLTEXCOORD2FPROC) glad_gl_on_demand_loader("glTexCoord2f");
    glad_glTexCoord2f(s, t);
}
PFNGLTEXCOORD2FPROC glad_glTexCoord2f = glad_on_demand_impl_glTexCoord2f;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2fv(const GLfloat * v) {
    glad_glTexCoord2fv = (PFNGLTEXCOORD2FVPROC) glad_gl_on_demand_loader("glTexCoord2fv");
    glad_glTexCoord2fv(v);
}
PFNGLTEXCOORD2FVPROC glad_glTexCoord2fv = glad_on_demand_impl_glTexCoord2fv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2i(GLint s, GLint t) {
    glad_glTexCoord2i = (PFNGLTEXCOORD2IPROC) glad_gl_on_demand_loader("glTexCoord2i");
    glad_glTexCoord2i(s, t);
}
PFNGLTEXCOORD2IPROC glad_glTexCoord2i = glad_on_demand_impl_glTexCoord2i;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2iv(const GLint * v) {
    glad_glTexCoord2iv = (PFNGLTEXCOORD2IVPROC) glad_gl_on_demand_loader("glTexCoord2iv");
    glad_glTexCoord2iv(v);
}
PFNGLTEXCOORD2IVPROC glad_glTexCoord2iv = glad_on_demand_impl_glTexCoord2iv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2s(GLshort s, GLshort t) {
    glad_glTexCoord2s = (PFNGLTEXCOORD2SPROC) glad_gl_on_demand_loader("glTexCoord2s");
    glad_glTexCoord2s(s, t);
}
PFNGLTEXCOORD2SPROC glad_glTexCoord2s = glad_on_demand_impl_glTexCoord2s;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord2sv(const GLshort * v) {
    glad_glTexCoord2sv = (PFNGLTEXCOORD2SVPROC) glad_gl_on_demand_loader("glTexCoord2sv");
    glad_glTexCoord2sv(v);
}
PFNGLTEXCOORD2SVPROC glad_glTexCoord2sv = glad_on_demand_impl_glTexCoord2sv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3d(GLdouble s, GLdouble t, GLdouble r) {
    glad_glTexCoord3d = (PFNGLTEXCOORD3DPROC) glad_gl_on_demand_loader("glTexCoord3d");
    glad_glTexCoord3d(s, t, r);
}
PFNGLTEXCOORD3DPROC glad_glTexCoord3d = glad_on_demand_impl_glTexCoord3d;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3dv(const GLdouble * v) {
    glad_glTexCoord3dv = (PFNGLTEXCOORD3DVPROC) glad_gl_on_demand_loader("glTexCoord3dv");
    glad_glTexCoord3dv(v);
}
PFNGLTEXCOORD3DVPROC glad_glTexCoord3dv = glad_on_demand_impl_glTexCoord3dv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3f(GLfloat s, GLfloat t, GLfloat r) {
    glad_glTexCoord3f = (PFNGLTEXCOORD3FPROC) glad_gl_on_demand_loader("glTexCoord3f");
    glad_glTexCoord3f(s, t, r);
}
PFNGLTEXCOORD3FPROC glad_glTexCoord3f = glad_on_demand_impl_glTexCoord3f;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3fv(const GLfloat * v) {
    glad_glTexCoord3fv = (PFNGLTEXCOORD3FVPROC) glad_gl_on_demand_loader("glTexCoord3fv");
    glad_glTexCoord3fv(v);
}
PFNGLTEXCOORD3FVPROC glad_glTexCoord3fv = glad_on_demand_impl_glTexCoord3fv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3i(GLint s, GLint t, GLint r) {
    glad_glTexCoord3i = (PFNGLTEXCOORD3IPROC) glad_gl_on_demand_loader("glTexCoord3i");
    glad_glTexCoord3i(s, t, r);
}
PFNGLTEXCOORD3IPROC glad_glTexCoord3i = glad_on_demand_impl_glTexCoord3i;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3iv(const GLint * v) {
    glad_glTexCoord3iv = (PFNGLTEXCOORD3IVPROC) glad_gl_on_demand_loader("glTexCoord3iv");
    glad_glTexCoord3iv(v);
}
PFNGLTEXCOORD3IVPROC glad_glTexCoord3iv = glad_on_demand_impl_glTexCoord3iv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3s(GLshort s, GLshort t, GLshort r) {
    glad_glTexCoord3s = (PFNGLTEXCOORD3SPROC) glad_gl_on_demand_loader("glTexCoord3s");
    glad_glTexCoord3s(s, t, r);
}
PFNGLTEXCOORD3SPROC glad_glTexCoord3s = glad_on_demand_impl_glTexCoord3s;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord3sv(const GLshort * v) {
    glad_glTexCoord3sv = (PFNGLTEXCOORD3SVPROC) glad_gl_on_demand_loader("glTexCoord3sv");
    glad_glTexCoord3sv(v);
}
PFNGLTEXCOORD3SVPROC glad_glTexCoord3sv = glad_on_demand_impl_glTexCoord3sv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
    glad_glTexCoord4d = (PFNGLTEXCOORD4DPROC) glad_gl_on_demand_loader("glTexCoord4d");
    glad_glTexCoord4d(s, t, r, q);
}
PFNGLTEXCOORD4DPROC glad_glTexCoord4d = glad_on_demand_impl_glTexCoord4d;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4dv(const GLdouble * v) {
    glad_glTexCoord4dv = (PFNGLTEXCOORD4DVPROC) glad_gl_on_demand_loader("glTexCoord4dv");
    glad_glTexCoord4dv(v);
}
PFNGLTEXCOORD4DVPROC glad_glTexCoord4dv = glad_on_demand_impl_glTexCoord4dv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
    glad_glTexCoord4f = (PFNGLTEXCOORD4FPROC) glad_gl_on_demand_loader("glTexCoord4f");
    glad_glTexCoord4f(s, t, r, q);
}
PFNGLTEXCOORD4FPROC glad_glTexCoord4f = glad_on_demand_impl_glTexCoord4f;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4fv(const GLfloat * v) {
    glad_glTexCoord4fv = (PFNGLTEXCOORD4FVPROC) glad_gl_on_demand_loader("glTexCoord4fv");
    glad_glTexCoord4fv(v);
}
PFNGLTEXCOORD4FVPROC glad_glTexCoord4fv = glad_on_demand_impl_glTexCoord4fv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4i(GLint s, GLint t, GLint r, GLint q) {
    glad_glTexCoord4i = (PFNGLTEXCOORD4IPROC) glad_gl_on_demand_loader("glTexCoord4i");
    glad_glTexCoord4i(s, t, r, q);
}
PFNGLTEXCOORD4IPROC glad_glTexCoord4i = glad_on_demand_impl_glTexCoord4i;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4iv(const GLint * v) {
    glad_glTexCoord4iv = (PFNGLTEXCOORD4IVPROC) glad_gl_on_demand_loader("glTexCoord4iv");
    glad_glTexCoord4iv(v);
}
PFNGLTEXCOORD4IVPROC glad_glTexCoord4iv = glad_on_demand_impl_glTexCoord4iv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) {
    glad_glTexCoord4s = (PFNGLTEXCOORD4SPROC) glad_gl_on_demand_loader("glTexCoord4s");
    glad_glTexCoord4s(s, t, r, q);
}
PFNGLTEXCOORD4SPROC glad_glTexCoord4s = glad_on_demand_impl_glTexCoord4s;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoord4sv(const GLshort * v) {
    glad_glTexCoord4sv = (PFNGLTEXCOORD4SVPROC) glad_gl_on_demand_loader("glTexCoord4sv");
    glad_glTexCoord4sv(v);
}
PFNGLTEXCOORD4SVPROC glad_glTexCoord4sv = glad_on_demand_impl_glTexCoord4sv;
static void GLAD_API_PTR glad_on_demand_impl_glTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glTexCoordPointer = (PFNGLTEXCOORDPOINTERPROC) glad_gl_on_demand_loader("glTexCoordPointer");
    glad_glTexCoordPointer(size, type, stride, pointer);
}
PFNGLTEXCOORDPOINTERPROC glad_glTexCoordPointer = glad_on_demand_impl_glTexCoordPointer;
static void GLAD_API_PTR glad_on_demand_impl_glTexEnvf(GLenum target, GLenum pname, GLfloat param) {
    glad_glTexEnvf = (PFNGLTEXENVFPROC) glad_gl_on_demand_loader("glTexEnvf");
    glad_glTexEnvf(target, pname, param);
}
PFNGLTEXENVFPROC glad_glTexEnvf = glad_on_demand_impl_glTexEnvf;
static void GLAD_API_PTR glad_on_demand_impl_glTexEnvfv(GLenum target, GLenum pname, const GLfloat * params) {
    glad_glTexEnvfv = (PFNGLTEXENVFVPROC) glad_gl_on_demand_loader("glTexEnvfv");
    glad_glTexEnvfv(target, pname, params);
}
PFNGLTEXENVFVPROC glad_glTexEnvfv = glad_on_demand_impl_glTexEnvfv;
static void GLAD_API_PTR glad_on_demand_impl_glTexEnvi(GLenum target, GLenum pname, GLint param) {
    glad_glTexEnvi = (PFNGLTEXENVIPROC) glad_gl_on_demand_loader("glTexEnvi");
    glad_glTexEnvi(target, pname, param);
}
PFNGLTEXENVIPROC glad_glTexEnvi = glad_on_demand_impl_glTexEnvi;
static void GLAD_API_PTR glad_on_demand_impl_glTexEnviv(GLenum target, GLenum pname, const GLint * params) {
    glad_glTexEnviv = (PFNGLTEXENVIVPROC) glad_gl_on_demand_loader("glTexEnviv");
    glad_glTexEnviv(target, pname, params);
}
PFNGLTEXENVIVPROC glad_glTexEnviv = glad_on_demand_impl_glTexEnviv;
static void GLAD_API_PTR glad_on_demand_impl_glTexGend(GLenum coord, GLenum pname, GLdouble param) {
    glad_glTexGend = (PFNGLTEXGENDPROC) glad_gl_on_demand_loader("glTexGend");
    glad_glTexGend(coord, pname, param);
}
PFNGLTEXGENDPROC glad_glTexGend = glad_on_demand_impl_glTexGend;
static void GLAD_API_PTR glad_on_demand_impl_glTexGendv(GLenum coord, GLenum pname, const GLdouble * params) {
    glad_glTexGendv = (PFNGLTEXGENDVPROC) glad_gl_on_demand_loader("glTexGendv");
    glad_glTexGendv(coord, pname, params);
}
PFNGLTEXGENDVPROC glad_glTexGendv = glad_on_demand_impl_glTexGendv;
static void GLAD_API_PTR glad_on_demand_impl_glTexGenf(GLenum coord, GLenum pname, GLfloat param) {
    glad_glTexGenf = (PFNGLTEXGENFPROC) glad_gl_on_demand_loader("glTexGenf");
    glad_glTexGenf(coord, pname, param);
}
PFNGLTEXGENFPROC glad_glTexGenf = glad_on_demand_impl_glTexGenf;
static void GLAD_API_PTR glad_on_demand_impl_glTexGenfv(GLenum coord, GLenum pname, const GLfloat * params) {
    glad_glTexGenfv = (PFNGLTEXGENFVPROC) glad_gl_on_demand_loader("glTexGenfv");
    glad_glTexGenfv(coord, pname, params);
}
PFNGLTEXGENFVPROC glad_glTexGenfv = glad_on_demand_impl_glTexGenfv;
static void GLAD_API_PTR glad_on_demand_impl_glTexGeni(GLenum coord, GLenum pname, GLint param) {
    glad_glTexGeni = (PFNGLTEXGENIPROC) glad_gl_on_demand_loader("glTexGeni");
    glad_glTexGeni(coord, pname, param);
}
PFNGLTEXGENIPROC glad_glTexGeni = glad_on_demand_impl_glTexGeni;
static void GLAD_API_PTR glad_on_demand_impl_glTexGeniv(GLenum coord, GLenum pname, const GLint * params) {
    glad_glTexGeniv = (PFNGLTEXGENIVPROC) glad_gl_on_demand_loader("glTexGeniv");
    glad_glTexGeniv(coord, pname, params);
}
PFNGLTEXGENIVPROC glad_glTexGeniv = glad_on_demand_impl_glTexGeniv;
static void GLAD_API_PTR glad_on_demand_impl_glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) {
    glad_glTexImage1D = (PFNGLTEXIMAGE1DPROC) glad_gl_on_demand_loader("glTexImage1D");
    glad_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
}
PFNGLTEXIMAGE1DPROC glad_glTexImage1D = glad_on_demand_impl_glTexImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) {
    glad_glTexImage2D = (PFNGLTEXIMAGE2DPROC) glad_gl_on_demand_loader("glTexImage2D");
    glad_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
}
PFNGLTEXIMAGE2DPROC glad_glTexImage2D = glad_on_demand_impl_glTexImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glTexParameterf(GLenum target, GLenum pname, GLfloat param) {
    glad_glTexParameterf = (PFNGLTEXPARAMETERFPROC) glad_gl_on_demand_loader("glTexParameterf");
    glad_glTexParameterf(target, pname, param);
}
PFNGLTEXPARAMETERFPROC glad_glTexParameterf = glad_on_demand_impl_glTexParameterf;
static void GLAD_API_PTR glad_on_demand_impl_glTexParameterfv(GLenum target, GLenum pname, const GLfloat * params) {
    glad_glTexParameterfv = (PFNGLTEXPARAMETERFVPROC) glad_gl_on_demand_loader("glTexParameterfv");
    glad_glTexParameterfv(target, pname, params);
}
PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv = glad_on_demand_impl_glTexParameterfv;
static void GLAD_API_PTR glad_on_demand_impl_glTexParameteri(GLenum target, GLenum pname, GLint param) {
    glad_glTexParameteri = (PFNGLTEXPARAMETERIPROC) glad_gl_on_demand_loader("glTexParameteri");
    glad_glTexParameteri(target, pname, param);
}
PFNGLTEXPARAMETERIPROC glad_glTexParameteri = glad_on_demand_impl_glTexParameteri;
static void GLAD_API_PTR glad_on_demand_impl_glTexParameteriv(GLenum target, GLenum pname, const GLint * params) {
    glad_glTexParameteriv = (PFNGLTEXPARAMETERIVPROC) glad_gl_on_demand_loader("glTexParameteriv");
    glad_glTexParameteriv(target, pname, params);
}
PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv = glad_on_demand_impl_glTexParameteriv;
static void GLAD_API_PTR glad_on_demand_impl_glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
    glad_glTexSubImage1D = (PFNGLTEXSUBIMAGE1DPROC) glad_gl_on_demand_loader("glTexSubImage1D");
    glad_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
}
PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D = glad_on_demand_impl_glTexSubImage1D;
static void GLAD_API_PTR glad_on_demand_impl_glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
    glad_glTexSubImage2D = (PFNGLTEXSUBIMAGE2DPROC) glad_gl_on_demand_loader("glTexSubImage2D");
    glad_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
}
PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D = glad_on_demand_impl_glTexSubImage2D;
static void GLAD_API_PTR glad_on_demand_impl_glTranslated(GLdouble x, GLdouble y, GLdouble z) {
    glad_glTranslated = (PFNGLTRANSLATEDPROC) glad_gl_on_demand_loader("glTranslated");
    glad_glTranslated(x, y, z);
}
PFNGLTRANSLATEDPROC glad_glTranslated = glad_on_demand_impl_glTranslated;
static void GLAD_API_PTR glad_on_demand_impl_glTranslatef(GLfloat x, GLfloat y, GLfloat z) {
    glad_glTranslatef = (PFNGLTRANSLATEFPROC) glad_gl_on_demand_loader("glTranslatef");
    glad_glTranslatef(x, y, z);
}
PFNGLTRANSLATEFPROC glad_glTranslatef = glad_on_demand_impl_glTranslatef;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2d(GLdouble x, GLdouble y) {
    glad_glVertex2d = (PFNGLVERTEX2DPROC) glad_gl_on_demand_loader("glVertex2d");
    glad_glVertex2d(x, y);
}
PFNGLVERTEX2DPROC glad_glVertex2d = glad_on_demand_impl_glVertex2d;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2dv(const GLdouble * v) {
    glad_glVertex2dv = (PFNGLVERTEX2DVPROC) glad_gl_on_demand_loader("glVertex2dv");
    glad_glVertex2dv(v);
}
PFNGLVERTEX2DVPROC glad_glVertex2dv = glad_on_demand_impl_glVertex2dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2f(GLfloat x, GLfloat y) {
    glad_glVertex2f = (PFNGLVERTEX2FPROC) glad_gl_on_demand_loader("glVertex2f");
    glad_glVertex2f(x, y);
}
PFNGLVERTEX2FPROC glad_glVertex2f = glad_on_demand_impl_glVertex2f;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2fv(const GLfloat * v) {
    glad_glVertex2fv = (PFNGLVERTEX2FVPROC) glad_gl_on_demand_loader("glVertex2fv");
    glad_glVertex2fv(v);
}
PFNGLVERTEX2FVPROC glad_glVertex2fv = glad_on_demand_impl_glVertex2fv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2i(GLint x, GLint y) {
    glad_glVertex2i = (PFNGLVERTEX2IPROC) glad_gl_on_demand_loader("glVertex2i");
    glad_glVertex2i(x, y);
}
PFNGLVERTEX2IPROC glad_glVertex2i = glad_on_demand_impl_glVertex2i;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2iv(const GLint * v) {
    glad_glVertex2iv = (PFNGLVERTEX2IVPROC) glad_gl_on_demand_loader("glVertex2iv");
    glad_glVertex2iv(v);
}
PFNGLVERTEX2IVPROC glad_glVertex2iv = glad_on_demand_impl_glVertex2iv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2s(GLshort x, GLshort y) {
    glad_glVertex2s = (PFNGLVERTEX2SPROC) glad_gl_on_demand_loader("glVertex2s");
    glad_glVertex2s(x, y);
}
PFNGLVERTEX2SPROC glad_glVertex2s = glad_on_demand_impl_glVertex2s;
static void GLAD_API_PTR glad_on_demand_impl_glVertex2sv(const GLshort * v) {
    glad_glVertex2sv = (PFNGLVERTEX2SVPROC) glad_gl_on_demand_loader("glVertex2sv");
    glad_glVertex2sv(v);
}
PFNGLVERTEX2SVPROC glad_glVertex2sv = glad_on_demand_impl_glVertex2sv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3d(GLdouble x, GLdouble y, GLdouble z) {
    glad_glVertex3d = (PFNGLVERTEX3DPROC) glad_gl_on_demand_loader("glVertex3d");
    glad_glVertex3d(x, y, z);
}
PFNGLVERTEX3DPROC glad_glVertex3d = glad_on_demand_impl_glVertex3d;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3dv(const GLdouble * v) {
    glad_glVertex3dv = (PFNGLVERTEX3DVPROC) glad_gl_on_demand_loader("glVertex3dv");
    glad_glVertex3dv(v);
}
PFNGLVERTEX3DVPROC glad_glVertex3dv = glad_on_demand_impl_glVertex3dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3f(GLfloat x, GLfloat y, GLfloat z) {
    glad_glVertex3f = (PFNGLVERTEX3FPROC) glad_gl_on_demand_loader("glVertex3f");
    glad_glVertex3f(x, y, z);
}
PFNGLVERTEX3FPROC glad_glVertex3f = glad_on_demand_impl_glVertex3f;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3fv(const GLfloat * v) {
    glad_glVertex3fv = (PFNGLVERTEX3FVPROC) glad_gl_on_demand_loader("glVertex3fv");
    glad_glVertex3fv(v);
}
PFNGLVERTEX3FVPROC glad_glVertex3fv = glad_on_demand_impl_glVertex3fv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3i(GLint x, GLint y, GLint z) {
    glad_glVertex3i = (PFNGLVERTEX3IPROC) glad_gl_on_demand_loader("glVertex3i");
    glad_glVertex3i(x, y, z);
}
PFNGLVERTEX3IPROC glad_glVertex3i = glad_on_demand_impl_glVertex3i;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3iv(const GLint * v) {
    glad_glVertex3iv = (PFNGLVERTEX3IVPROC) glad_gl_on_demand_loader("glVertex3iv");
    glad_glVertex3iv(v);
}
PFNGLVERTEX3IVPROC glad_glVertex3iv = glad_on_demand_impl_glVertex3iv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3s(GLshort x, GLshort y, GLshort z) {
    glad_glVertex3s = (PFNGLVERTEX3SPROC) glad_gl_on_demand_loader("glVertex3s");
    glad_glVertex3s(x, y, z);
}
PFNGLVERTEX3SPROC glad_glVertex3s = glad_on_demand_impl_glVertex3s;
static void GLAD_API_PTR glad_on_demand_impl_glVertex3sv(const GLshort * v) {
    glad_glVertex3sv = (PFNGLVERTEX3SVPROC) glad_gl_on_demand_loader("glVertex3sv");
    glad_glVertex3sv(v);
}
PFNGLVERTEX3SVPROC glad_glVertex3sv = glad_on_demand_impl_glVertex3sv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
    glad_glVertex4d = (PFNGLVERTEX4DPROC) glad_gl_on_demand_loader("glVertex4d");
    glad_glVertex4d(x, y, z, w);
}
PFNGLVERTEX4DPROC glad_glVertex4d = glad_on_demand_impl_glVertex4d;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4dv(const GLdouble * v) {
    glad_glVertex4dv = (PFNGLVERTEX4DVPROC) glad_gl_on_demand_loader("glVertex4dv");
    glad_glVertex4dv(v);
}
PFNGLVERTEX4DVPROC glad_glVertex4dv = glad_on_demand_impl_glVertex4dv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
    glad_glVertex4f = (PFNGLVERTEX4FPROC) glad_gl_on_demand_loader("glVertex4f");
    glad_glVertex4f(x, y, z, w);
}
PFNGLVERTEX4FPROC glad_glVertex4f = glad_on_demand_impl_glVertex4f;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4fv(const GLfloat * v) {
    glad_glVertex4fv = (PFNGLVERTEX4FVPROC) glad_gl_on_demand_loader("glVertex4fv");
    glad_glVertex4fv(v);
}
PFNGLVERTEX4FVPROC glad_glVertex4fv = glad_on_demand_impl_glVertex4fv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4i(GLint x, GLint y, GLint z, GLint w) {
    glad_glVertex4i = (PFNGLVERTEX4IPROC) glad_gl_on_demand_loader("glVertex4i");
    glad_glVertex4i(x, y, z, w);
}
PFNGLVERTEX4IPROC glad_glVertex4i = glad_on_demand_impl_glVertex4i;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4iv(const GLint * v) {
    glad_glVertex4iv = (PFNGLVERTEX4IVPROC) glad_gl_on_demand_loader("glVertex4iv");
    glad_glVertex4iv(v);
}
PFNGLVERTEX4IVPROC glad_glVertex4iv = glad_on_demand_impl_glVertex4iv;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) {
    glad_glVertex4s = (PFNGLVERTEX4SPROC) glad_gl_on_demand_loader("glVertex4s");
    glad_glVertex4s(x, y, z, w);
}
PFNGLVERTEX4SPROC glad_glVertex4s = glad_on_demand_impl_glVertex4s;
static void GLAD_API_PTR glad_on_demand_impl_glVertex4sv(const GLshort * v) {
    glad_glVertex4sv = (PFNGLVERTEX4SVPROC) glad_gl_on_demand_loader("glVertex4sv");
    glad_glVertex4sv(v);
}
PFNGLVERTEX4SVPROC glad_glVertex4sv = glad_on_demand_impl_glVertex4sv;
static void GLAD_API_PTR glad_on_demand_impl_glVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) {
    glad_glVertexPointer = (PFNGLVERTEXPOINTERPROC) glad_gl_on_demand_loader("glVertexPointer");
    glad_glVertexPointer(size, type, stride, pointer);
}
PFNGLVERTEXPOINTERPROC glad_glVertexPointer = glad_on_demand_impl_glVertexPointer;
static void GLAD_API_PTR glad_on_demand_impl_glViewport(GLint x, GLint y, GLsizei width, GLsizei height) {
    glad_glViewport = (PFNGLVIEWPORTPROC) glad_gl_on_demand_loader("glViewport");
    glad_glViewport(x, y, width, height);
}
PFNGLVIEWPORTPROC glad_glViewport = glad_on_demand_impl_glViewport;


 

#ifdef GLAD_GL

#ifndef GLAD_LOADER_LIBRARY_C_
#define GLAD_LOADER_LIBRARY_C_

#include <stddef.h>
#include <stdlib.h>

#if GLAD_PLATFORM_WIN32
#include <windows.h>
#else
#include <dlfcn.h>
#endif


static void* glad_get_dlopen_handle(const char *lib_names[], int length) {
    void *handle = NULL;
    int i;

    for (i = 0; i < length; ++i) {
#if GLAD_PLATFORM_WIN32
  #if GLAD_PLATFORM_UWP
        size_t buffer_size = (strlen(lib_names[i]) + 1) * sizeof(WCHAR);
        LPWSTR buffer = (LPWSTR) malloc(buffer_size);
        if (buffer != NULL) {
            int ret = MultiByteToWideChar(CP_ACP, 0, lib_names[i], -1, buffer, buffer_size);
            if (ret != 0) {
                handle = (void*) LoadPackagedLibrary(buffer, 0);
            }
            free((void*) buffer);
        }
  #else
        handle = (void*) LoadLibraryA(lib_names[i]);
  #endif
#else
        handle = dlopen(lib_names[i], RTLD_LAZY | RTLD_LOCAL);
#endif
        if (handle != NULL) {
            return handle;
        }
    }

    return NULL;
}

static void glad_close_dlopen_handle(void* handle) {
    if (handle != NULL) {
#if GLAD_PLATFORM_WIN32
        FreeLibrary((HMODULE) handle);
#else
        dlclose(handle);
#endif
    }
}

static GLADapiproc glad_dlsym_handle(void* handle, const char *name) {
    if (handle == NULL) {
        return NULL;
    }

#if GLAD_PLATFORM_WIN32
    return (GLADapiproc) GetProcAddress((HMODULE) handle, name);
#else
    return GLAD_GNUC_EXTENSION (GLADapiproc) dlsym(handle, name);
#endif
}

#endif /* GLAD_LOADER_LIBRARY_C_ */

typedef void* (GLAD_API_PTR *GLADglprocaddrfunc)(const char*);
struct _glad_gl_userptr {
    void *handle;
    GLADglprocaddrfunc gl_get_proc_address_ptr;
};

static GLADapiproc glad_gl_get_proc(void *vuserptr, const char *name) {
    struct _glad_gl_userptr userptr = *(struct _glad_gl_userptr*) vuserptr;
    GLADapiproc result = NULL;

    if(userptr.gl_get_proc_address_ptr != NULL) {
        result = GLAD_GNUC_EXTENSION (GLADapiproc) userptr.gl_get_proc_address_ptr(name);
    }
    if(result == NULL) {
        result = glad_dlsym_handle(userptr.handle, name);
    }

    return result;
}

static void* _gl_handle = NULL;

static void* glad_gl_dlopen_handle(void) {
#if GLAD_PLATFORM_APPLE
    static const char *NAMES[] = {
        "../Frameworks/OpenGL.framework/OpenGL",
        "/Library/Frameworks/OpenGL.framework/OpenGL",
        "/System/Library/Frameworks/OpenGL.framework/OpenGL",
        "/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL"
    };
#elif GLAD_PLATFORM_WIN32
    static const char *NAMES[] = {"opengl32.dll"};
#else
    static const char *NAMES[] = {
  #if defined(__CYGWIN__)
        "libGL-1.so",
  #endif
        "libGL.so.1",
        "libGL.so"
    };
#endif

    if (_gl_handle == NULL) {
        _gl_handle = glad_get_dlopen_handle(NAMES, sizeof(NAMES) / sizeof(NAMES[0]));
    }

    return _gl_handle;
}

static struct _glad_gl_userptr glad_gl_build_userptr(void *handle) {
    struct _glad_gl_userptr userptr;

    userptr.handle = handle;
#if GLAD_PLATFORM_APPLE || defined(__HAIKU__)
    userptr.gl_get_proc_address_ptr = NULL;
#elif GLAD_PLATFORM_WIN32
    userptr.gl_get_proc_address_ptr =
        (GLADglprocaddrfunc) glad_dlsym_handle(handle, "wglGetProcAddress");
#else
    userptr.gl_get_proc_address_ptr =
        (GLADglprocaddrfunc) glad_dlsym_handle(handle, "glXGetProcAddressARB");
#endif

    return userptr;
}


#ifdef __cplusplus
static struct _glad_gl_userptr glad_gl_internal_loader_global_userptr = {};
#else
static struct _glad_gl_userptr glad_gl_internal_loader_global_userptr = { 0 };
#endif
static GLADapiproc glad_gl_internal_loader_get_proc(const char *name) {
    if (glad_gl_internal_loader_global_userptr.handle == NULL) {
        glad_gl_internal_loader_global_userptr = glad_gl_build_userptr(glad_gl_dlopen_handle());
    }

    return glad_gl_get_proc((void *) &glad_gl_internal_loader_global_userptr, name);
}


void gladLoaderUnloadGL(void) {
    if (_gl_handle != NULL) {
        glad_close_dlopen_handle(_gl_handle);
        _gl_handle = NULL;
        glad_gl_internal_loader_global_userptr.handle = NULL;
    }
}

#endif /* GLAD_GL */

#ifdef __cplusplus
}
#endif

#endif /* GLAD_GL_IMPLEMENTATION */

